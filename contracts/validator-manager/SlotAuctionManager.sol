// (c) 2025, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

// SPDX-License-Identifier: LicenseRef-Ecosystem

pragma solidity 0.8.25;

import {IERC20} from "@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol";
import {IValidatorManager} from "./interfaces/IValidatorManager.sol";
import {PChainOwner} from "./interfaces/IACP99Manager.sol";
import {EmCoin} from "./EmCoin.sol";
import {Heap} from "@openzeppelin/contracts@5.0.2/utils/structs/Heap.sol";
//TODO: make these constant and also public, prob some way to store it in memory or something from here
import {ReentrancyGuardUpgradeable} from
    "@openzeppelin/contracts-upgradeable@5.0.2/utils/ReentrancyGuardUpgradeable.sol";
import {ContextUpgradeable} from
    "@openzeppelin/contracts-upgradeable@5.0.2/utils/ContextUpgradeable.sol";
import {Comparators} from "@openzeppelin/contracts@5.0.2/utils/Comparators.sol";
import "@openzeppelin/contracts@5.0.2/utils/math/Math.sol";
struct ValidatorBid {
    address addr;
    uint256 bid;
    bytes nodeID;
    bytes blsPublicKey;
    PChainOwner remainingBalanceOwner;
    PChainOwner disableOwner;
}

struct ValidatorInfo {
    address addr;
    uint256 endTime;
    bytes nodeID;
    bytes blsPublicKey;
    bytes32 validationID;
    uint64 Weight;
}

contract SlotAuctionManager is ReentrancyGuardUpgradeable, ContextUpgradeable {
    using Heap for Heap.Uint256Heap;

    IERC20 public TOKEN_CONTRACT;
    IValidatorManager public VALIDATOR_MANAGER;
    bool public auctionInProgress;
    uint256 public auctionEndTime;
    uint16 public validatorSlots;
    uint64 public validatorWeight;
    uint256 public validationTimeLimit;
    mapping (bytes nodeID => bool isQualified) private _nodeIsQualified; //checks to see if the NodeID is currently in the heap
    mapping (bytes nodeID => ValidatorInfo) public currentValidators;
    mapping (uint256 bid => ValidatorBid) public bidderInfo;
    uint256 private _secondPrice;
    Heap.Uint256Heap internal _bids; //I dont know why, but making this public causes it to fail, so I made it internal, something about autogenerated getter functions

    constructor(address tokenAddress, address vmAddress) {
        TOKEN_CONTRACT = IERC20(tokenAddress);
        VALIDATOR_MANAGER = IValidatorManager(vmAddress);
    }

    //TODO replace this ^ with this v once I know it wont cause issues for me

    // function initialize(address tokenAddress, address vmAddress)public initializer {
    //     TOKEN_CONTRACT = IERC20(tokenAddress);
    //     VALIDATOR_MANAGER = IValidatorManager(vmAddress);
    // }

    
    function initiateAuction(
        uint16 validatorslots,
        uint64 weight,
        uint256 auctionLength,
        uint256 validationLength
    ) external {
        require(!auctionInProgress, "Auction already running");
        validatorWeight = weight;
        //require(only owner can call this contract)
        //require(churn percentage will not be overlooked)
        //Things to add:
        //no re entry
        //probably a lot more
       
        auctionEndTime = block.timestamp + auctionLength; //sets the minimum end time of the auction, can go over
        validatorSlots = validatorslots;
        validationTimeLimit = validationLength;
        _secondPrice = 0;

        delete _bids.tree; //initiates an empty heap array, id rather just create a new one but solidity memory syntax is still confusing to me
        auctionInProgress = true;
    }

    function placeBid(
        uint256 bid,
        bytes memory nodeID,
        bytes memory blsPublicKey,
        PChainOwner memory remainingBalanceOwner,
        PChainOwner memory disableOwner
    ) external {
        require(auctionInProgress, "Auction is not running");
        require(currentValidators[nodeID].addr == address(0), "Node is already a validator");
        require(!_nodeIsQualified[nodeID], "Node is already in a winning position");

        if (Heap.length(_bids) < validatorSlots) {
            require (TOKEN_CONTRACT.transferFrom(msg.sender, address(this), bid), "Insufficient funds to bid");
            Heap.insert(_bids, bid);
        } 
        //weird edge case in the scenario where N people bid, and no more bids come in greater than the smallest qualifying bid
        //leading to second price being 0, even though there is a bid that qualifies as a second price but ignored since it didn't alter the heap
        else if (_secondPrice == 0 && Heap.peek(_bids) > bid) {
            _secondPrice = bid;
        }
        else if (Heap.peek(_bids) < bid) {
            
            require (TOKEN_CONTRACT.transferFrom(msg.sender, address(this), bid), "Insufficient funds to bid");
            uint256 poppedBid = Heap.replace(_bids, bid);
            _secondPrice = poppedBid;
            TOKEN_CONTRACT.transfer(bidderInfo[poppedBid].addr, poppedBid); //send back held funds if lost auction
            delete _nodeIsQualified[bidderInfo[poppedBid].nodeID];
            delete bidderInfo[poppedBid]; //deletes info of bidder no longer needed along with replacing it in the heap
        }
        else {
            return;
        }
        bidderInfo[bid] = ValidatorBid(msg.sender, bid, nodeID, blsPublicKey, remainingBalanceOwner, disableOwner);
        _nodeIsQualified[nodeID] = true;
    }

    function endAuction() external {
        //only owner
        require(auctionInProgress, "Auction not in progress");
        require(block.timestamp > auctionEndTime, "Auction endtime not reached"); //gotta word this better
        auctionInProgress = false; //set auction to false so no more bids can come in
        auctionEndTime = 0;

        if (_secondPrice == 0 && Heap.length(_bids) != 0) { //avoids array out of bounds for Heap.peek
            _secondPrice = Heap.peek(_bids);
        }

        while (Heap.length(_bids) > 0) {
            //grabs next bid
            uint256 currentBid = Heap.pop(_bids);
            ValidatorBid memory bidInfo = bidderInfo[currentBid];
            //sends back extra tokens due to second price
            uint256 tokenRefund = currentBid - _secondPrice;
            TOKEN_CONTRACT.transfer(bidInfo.addr, tokenRefund);
            //registers as validator
            bytes32 validationID = _initiateValidatorRegistration(bidInfo.nodeID, bidInfo.blsPublicKey, bidInfo.remainingBalanceOwner, bidInfo.disableOwner, validatorWeight);
            currentValidators[bidInfo.nodeID] = ValidatorInfo(bidInfo.addr, validationTimeLimit + block.timestamp, bidInfo.nodeID, bidInfo.blsPublicKey, validationID, validatorWeight);
            
            _secondPrice = currentBid;
        }
        
        validatorSlots = 0;
        validationTimeLimit = 0;
    }

    function initiateValidatorRemoval(
        bytes32 validationID
    ) public {
        VALIDATOR_MANAGER.initiateValidatorRemoval(validationID);
    }
    function initiateRemoveInitialValidator(
        bytes32 validationID
    ) public {
        VALIDATOR_MANAGER.initiateValidatorRemoval(validationID);
    }

    function completeRemoveInitialValidator(
        uint32 messageIndex
    ) public {
        VALIDATOR_MANAGER.completeValidatorRemoval(messageIndex);
    }
    
    function completeValidatorRegistration(
        uint32 messageIndex
    ) public returns (bytes32) {
        return VALIDATOR_MANAGER.completeValidatorRegistration(messageIndex);
    }

    function completeValidatorRemoval(
        uint32 messageIndex
    ) public returns (bytes32) {
        return VALIDATOR_MANAGER.completeValidatorRemoval(messageIndex);
    }
    
    
    function peekTop () public view returns (uint256){
        if (Heap.length(_bids) == 0 || !auctionInProgress) {
            return 0;
        }
        return Heap.peek(_bids);
    }

    function _initiateValidatorRegistration(
        bytes memory nodeID,
        bytes memory blsPublicKey,
        PChainOwner memory remainingBalanceOwner,
        PChainOwner memory disableOwner,
        uint64 weight
    ) internal returns (bytes32) {
        bytes32 validationID = VALIDATOR_MANAGER.initiateValidatorRegistration(
            nodeID, blsPublicKey, remainingBalanceOwner, disableOwner, weight
        );
        return validationID;
    }



}  
