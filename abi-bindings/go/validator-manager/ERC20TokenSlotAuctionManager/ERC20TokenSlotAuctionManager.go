// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc20tokenslotauctionmanager

import (
	"errors"
	"math/big"
	"strings"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/accounts/abi/bind"
	"github.com/ava-labs/subnet-evm/core/types"
	"github.com/ava-labs/subnet-evm/interfaces"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = interfaces.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AuctionSettings is an auto generated low-level Go binding around an user-defined struct.
type AuctionSettings struct {
	TotalValidatorSlots  uint16
	Weight               uint64
	MinValidatorDuration *big.Int
	MinAuctionDuration   *big.Int
	MinimumBid           *big.Int
}

// PChainOwner is an auto generated low-level Go binding around an user-defined struct.
type PChainOwner struct {
	Threshold uint32
	Addresses []common.Address
}

// SlotAuctionManagerSettings is an auto generated low-level Go binding around an user-defined struct.
type SlotAuctionManagerSettings struct {
	Admin           common.Address
	Manager         common.Address
	AuctionSettings AuctionSettings
}

// ERC20TokenSlotAuctionManagerMetaData contains all meta data concerning the ERC20TokenSlotAuctionManager contract.
var ERC20TokenSlotAuctionManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"enumICMInitializable\",\"name\":\"init\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionEndTime\",\"type\":\"uint256\"}],\"name\":\"AuctionEndTimeNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionFinalizing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionCooldownEndtime\",\"type\":\"uint256\"}],\"name\":\"AuctionInCooldown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionInProgress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotInProgress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minumumBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBid\",\"type\":\"uint256\"}],\"name\":\"BidSmallerThanMinimum\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"DuplicateBidInContention\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"}],\"name\":\"DuplicateNodeIDInContention\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"smallestAcceptableBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBid\",\"type\":\"uint256\"}],\"name\":\"InsufficientBidToWinAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumValidationDuration\",\"type\":\"uint256\"}],\"name\":\"InvalidMinValidatorDuration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"}],\"name\":\"InvalidWeight\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"totalValidatorSlots\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"activeValidators\",\"type\":\"uint16\"}],\"name\":\"MoreActiveValidatorsThanTotalSlots\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"validatorSlots\",\"type\":\"uint16\"}],\"name\":\"NoOpenValidatorSlots\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"}],\"name\":\"NodeIsValidator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"validationTimeLimit\",\"type\":\"uint256\"}],\"name\":\"ValidatorTimeLimitNotPassed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"validatorWeight\",\"type\":\"uint64\"}],\"name\":\"ValidatorWeightTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroMinBid\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"}],\"name\":\"BidEvicted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"validationID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"}],\"name\":\"InitiatedAuctionValidatorRegistration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"validatorSlots\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"validatorWeight\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minValidatorDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumBid\",\"type\":\"uint256\"}],\"name\":\"NewValidatorAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"}],\"name\":\"SuccessfulBidPlaced\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC20\",\"outputs\":[{\"internalType\":\"contractIERC20Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20_TOKEN_SLOT_AUCTION_MANAGER_STORAGE_LOCATION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinBidRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLOT_AUCTION_MANAGER_STORAGE_LOCATION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"messageIndex\",\"type\":\"uint32\"}],\"name\":\"completeRemoveInitialValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"messageIndex\",\"type\":\"uint32\"}],\"name\":\"completeValidatorRegistration\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"messageIndex\",\"type\":\"uint32\"}],\"name\":\"completeValidatorRemoval\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinAuctionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinValidatorDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpenValidatorSlots\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValidatorSlots\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorWeight\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20Mintable\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contractIValidatorManager\",\"name\":\"manager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"totalValidatorSlots\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"Weight\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"MinValidatorDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MinAuctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MinimumBid\",\"type\":\"uint256\"}],\"internalType\":\"structAuctionSettings\",\"name\":\"auctionSettings\",\"type\":\"tuple\"}],\"internalType\":\"structSlotAuctionManagerSettings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"validationID\",\"type\":\"bytes32\"}],\"name\":\"initiateRemoveInitialValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"validationID\",\"type\":\"bytes32\"}],\"name\":\"initiateValidatorRemoval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blsPublicKey\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"threshold\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"internalType\":\"structPChainOwner\",\"name\":\"remainingBalanceOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"threshold\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"internalType\":\"structPChainOwner\",\"name\":\"disableOwner\",\"type\":\"tuple\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"totalValidatorSlots\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"Weight\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"MinValidatorDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MinAuctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MinimumBid\",\"type\":\"uint256\"}],\"internalType\":\"structAuctionSettings\",\"name\":\"auctionSettings\",\"type\":\"tuple\"}],\"name\":\"setSlotAuctionSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f80fd5b506040516130b83803806130b883398101604081905261002e91610107565b60018160018111156100425761004261012c565b0361004f5761004f610055565b50610140565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156100a55760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146101045780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b5f60208284031215610117575f80fd5b815160028110610125575f80fd5b9392505050565b634e487b7160e01b5f52602160045260245ffd5b612f6b8061014d5f395ff3fe608060405234801561000f575f80fd5b5060043610610148575f3560e01c80639940d4c6116100bf578063c5b6360011610079578063c5b6360014610299578063cc4aa204146102a1578063da4312a4146102a9578063e4c822ca146102bc578063f2fde38b146102cf578063fe67a54b146102e2575f80fd5b80639940d4c61461021d578063a3a65e4814610225578063a476f67514610238578063aaab85161461024b578063ab8dd52f14610272578063b6e6a2ca14610286575f80fd5b8063715018a611610110578063715018a6146101b257806372684dd3146101ba57806378eb9c10146101da5780638da5cb5b146101e2578063913ed0b1146102025780639681d9401461020a575f80fd5b806301f6cec81461014c57806305af8256146101675780631a7f3eaa1461017c57806331b6822e1461018f5780635561f9df146101aa575b5f80fd5b6101546102ea565b6040519081526020015b60405180910390f35b61017a61017536600461271b565b6102fe565b005b61017a61018a366004612748565b61037d565b61019761048b565b60405161ffff909116815260200161015e565b61017a6104a3565b61017a610811565b6101c2610824565b6040516001600160401b03909116815260200161015e565b610197610848565b6101ea610867565b6040516001600160a01b03909116815260200161015e565b61015461089b565b61015461021836600461271b565b610932565b6101546109b5565b61015461023336600461271b565b6109c9565b61017a610246366004612787565b610a47565b6101547f6494e1e6ac2d5f44a06b929c1549cec0c499347f244a852c37aef6b6707be60081565b6101545f80516020612ef683398151915281565b61017a610294366004612787565b610aae565b610154610c4e565b6101ea610c62565b61017a6102b736600461293e565b610c77565b61017a6102ca3660046129ec565b610ca9565b61017a6102dd366004612a02565b610f4e565b61017a610f8b565b5f806102f461171c565b6003015492915050565b5f61030761171c565b805460405163025a076560e61b815263ffffffff851660048201529192506001600160a01b031690639681d940906024016020604051808303815f875af1158015610354573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103789190612a1d565b505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03165f811580156103c15750825b90505f826001600160401b031660011480156103dc5750303b155b9050811580156103ea575080155b156104085760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561043257845460ff60401b1916600160401b1785555b61043c8688611740565b831561048257845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b5f8061049561171c565b6002015461ffff1692915050565b5f6104ac61171c565b905060018154600160a01b900460ff1660028111156104cd576104cd612a34565b036104eb57604051639bbb1f3b60e01b815260040160405180910390fd5b60028154600160a01b900460ff16600281111561050a5761050a612a34565b0361052857604051631f86de2560e21b815260040160405180910390fd5b5f61053161171c565b90508060060154421015610569578060060154604051638fc300c160e01b815260040161056091815260200190565b60405180910390fd5b5f61057261171c565b805460ff60a01b1916600160a01b17815560048101549091506105959042612a5c565b60018201555f600b82018190556002820154600160201b900461ffff1690036105e35760028101546040516379c2afbd60e11b8152600160201b90910461ffff166004820152602401610560565b6002810154815460408051631761632760e31b815290515f93600160301b90046001600160401b0316926001600160a01b03169163bb0b19389160048083019260209291908290030181865afa15801561063f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106639190612a83565b835460408051633002a2bb60e21b815290516001600160a01b039092169163c00a8aec916004808201926020929091908290030181865afa1580156106aa573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106ce9190612a9e565b60ff166106db9190612abe565b6106e59190612ae9565b6106f0906064612abe565b9050806001600160401b03165f03610732576002820154604051632bfe056160e01b8152600160301b9091046001600160401b03166004820152602401610560565b6002820154600160201b900461ffff166001600160401b0382161115610779576002820180546201000061ffff600160201b8304160263ffff000019909116179055610794565b60028201805463ffff000019166201000061ffff8416021790555b60028201546003830154600184015460058501546040805162010000860461ffff168152600160301b9095046001600160401b03166020860152840192909252606083015260808201527f50e40b07b3cd91a269f83830c35b4c090f74ebd0cc06dce4db251ccc23627b549060a00160405180910390a150505050565b61081961175e565b6108225f611790565b565b5f8061082e61171c565b60020154600160301b90046001600160401b031692915050565b5f8061085261171c565b60020154600160201b900461ffff1692915050565b5f807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b546001600160a01b031692915050565b5f806108a561171c565b905060018154600160a01b900460ff1660028111156108c6576108c6612a34565b146108e3576040516232f00d60e71b815260040160405180910390fd5b5f6108ec61171c565b600281015490915061ffff16610903600c83015490565b1015610913576005015491505090565b61091f81600c01611800565b61092a906001612a5c565b9250505b5090565b5f8061093c61171c565b805460405163025a076560e61b815263ffffffff861660048201529192506001600160a01b031690639681d940906024015b6020604051808303815f875af115801561098a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109ae9190612a1d565b9392505050565b5f806109bf61171c565b6004015492915050565b5f806109d361171c565b600281018054919250600160201b90910461ffff169060046109f483612b1a565b825461ffff9182166101009390930a9283029190920219909116179055508054604051631474cbc960e31b815263ffffffff851660048201526001600160a01b039091169063a3a65e489060240161096e565b5f610a5061171c565b8054604051635b73516560e11b8152600481018590529192506001600160a01b03169063b6e6a2ca906024015b5f604051808303815f87803b158015610a94575f80fd5b505af1158015610aa6573d5f803e3d5ffd5b505050505050565b5f610ab761171c565b5f838152600982016020526040902060010154909150421015610b05575f82815260098201602052604090819020600101549051631a936b7b60e11b81526004810191909152602401610560565b80600801816009015f8481526020019081526020015f20600201604051610b2c9190612b68565b90815260405190819003602001902080546001600160a01b03191681555f60018201819055610b5e6002830182612642565b610b6b600383015f612642565b505f600482018190556005909101805467ffffffffffffffff19169055828152600982016020526040812080546001600160a01b03191681556001810182905590610bb96002830182612642565b610bc6600383015f612642565b505f6004828101919091556005909101805467ffffffffffffffff19169055600282018054600160201b900461ffff1691610c0083612bda565b825461ffff9182166101009390930a9283029190920219909116179055508054604051635b73516560e11b8152600481018490526001600160a01b039091169063b6e6a2ca90602401610a7d565b5f80610c5861171c565b6005015492915050565b5f805f80516020612ef683398151915261088b565b610c7f611825565b610c8c858585858561185c565b610ca260015f80516020612f1683398151915255565b5050505050565b5f610cb261171c565b905060018154600160a01b900460ff166002811115610cd357610cd3612a34565b03610cf157604051639bbb1f3b60e01b815260040160405180910390fd5b60028154600160a01b900460ff166002811115610d1057610d10612a34565b03610d2e57604051631f86de2560e21b815260040160405180910390fd5b610d3661175e565b5f610d3f61171c565b600281015490915061ffff16610d586020850185612bfa565b61ffff161115610dea57600281015461ffff16610d786020850185612bfa565b610d829190612c1b565b600282018054600490610da1908490600160201b900461ffff16612c3d565b92506101000a81548161ffff021916908361ffff160217905550825f016020810190610dcd9190612bfa565b60028201805461ffff191661ffff92909216919091179055610ef5565b610df76020840184612bfa565b600282015461ffff91821691610e1791600160201b810482169116612c1b565b61ffff161115610e7157610e2e6020840184612bfa565b6002820154610e4a9061ffff600160201b820481169116612c1b565b60405163942cc62360e01b815261ffff928316600482015291166024820152604401610560565b610e7e6020840184612bfa565b6002820154610e91919061ffff16612c1b565b600282018054600490610eb0908490600160201b900461ffff16612c1b565b92506101000a81548161ffff021916908361ffff160217905550825f016020810190610edc9190612bfa565b60028201805461ffff191661ffff929092169190911790555b60608301356004820155604083018035600383015560808401356005830155610f219060208501612c58565b8160020160066101000a8154816001600160401b0302191690836001600160401b03160217905550505050565b610f5661175e565b6001600160a01b038116610f7f57604051631e4fbdf760e01b81525f6004820152602401610560565b610f8881611790565b50565b610f93611825565b5f610f9c61171c565b905060018154600160a01b900460ff166002811115610fbd57610fbd612a34565b14610fda576040516232f00d60e71b815260040160405180910390fd5b5f610fe361171c565b9050610ff24262015180612a5c565b6006820155805460ff60a01b1916600160a11b1781556001810154421015611035578060010154604051638230260760e01b815260040161056091815260200190565b600b81015415801561104a5750600c81015415155b156110615761105b81600c01611800565b600b8201555b5f61106d82600c015490565b11156116e5575f61108082600c01611d78565b5f818152600a840160209081526040808320815160c08101835281546001600160a01b03168152600182015493810193909352600281018054959650939492939092918401916110cf90612b36565b80601f01602080910402602001604051908101604052809291908181526020018280546110fb90612b36565b80156111465780601f1061111d57610100808354040283529160200191611146565b820191905f5260205f20905b81548152906001019060200180831161112957829003601f168201915b5050505050815260200160038201805461115f90612b36565b80601f016020809104026020016040519081016040528092919081815260200182805461118b90612b36565b80156111d65780601f106111ad576101008083540402835291602001916111d6565b820191905f5260205f20905b8154815290600101906020018083116111b957829003601f168201915b505050918352505060408051808201825260048401805463ffffffff16825260058501805484516020828102820181019096528181529585019593949293858401939092919083018282801561125357602002820191905f5260205f20905b81546001600160a01b03168152600190910190602001808311611235575b50505091909252505050815260408051808201825260068401805463ffffffff1682526007850180548451602082810282018101909652818152958501959394929385840193909291908301828280156112d457602002820191905f5260205f20905b81546001600160a01b031681526001909101906020018083116112b6575b505050919092525050509052505f838152600a85016020526040812080546001600160a01b0319168155600181018290559192506113156002830182612642565b611322600383015f612642565b60048201805463ffffffff191681555f61133f6005850182612679565b505060068201805463ffffffff191681555f61135e6007850182612679565b505050508260070181604001516040516113789190612c95565b908152604051908190036020019020805460ff19169055600b83015461139e9083612cb0565b156113be578051600b8401546113be91906113b99085612cb0565b611d8b565b82546040828101516060840151608085015160a086015160028901549451634e5bb12760e11b81525f966001600160a01b031695639cb7624e9561141d959094909390929091600160301b90046001600160401b031690600401612d54565b6020604051808303815f875af1158015611439573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061145d9190612a1d565b9050815f01516001600160a01b0316817f032100a60b84cf31291641706872970585d53fa5be412562041fbf66a99ce285866001015487600301546114a29190612a5c565b600288015460408051928352600160301b9091046001600160401b031660208301520160405180910390a36040518060c00160405280835f01516001600160a01b03168152602001856001015486600301546114fe9190612a5c565b81526040848101805160208401526060808701518385015283018590526002880154600160301b90046001600160401b031660809093019290925290519051600887019161154b91612c95565b9081526040805160209281900383019020835181546001600160a01b0319166001600160a01b0390911617815591830151600183015582015160028201906115939082612e00565b50606082015160038201906115a89082612e00565b506080820151600482015560a0909101516005909101805467ffffffffffffffff19166001600160401b039092169190911790556040805160c0810190915282516001600160a01b0316815260018501546003860154602083019161160c91612a5c565b8152604084810151602080840191909152606080870151838501528301859052600288810154600160301b90046001600160401b03166080909401939093525f858152600989018252829020845181546001600160a01b0319166001600160a01b039091161781559084015160018201559083015190918201906116909082612e00565b50606082015160038201906116a59082612e00565b506080820151600482015560a0909101516005909101805467ffffffffffffffff19166001600160401b039092169190911790555050600b820155611061565b5f600182015560028101805463ffff000019169055805460ff60a01b191690555061082260015f80516020612f1683398151915255565b7f6494e1e6ac2d5f44a06b929c1549cec0c499347f244a852c37aef6b6707be60090565b611748611daf565b61175182611df8565b61175a81611e39565b5050565b33611767610867565b6001600160a01b0316146108225760405163118cdaa760e01b8152336004820152602401610560565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f815f015f8154811061181557611815612ebb565b905f5260205f2001549050919050565b5f80516020612f1683398151915280546001190161185657604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b5f61186561171c565b905060018154600160a01b900460ff16600281111561188657611886612a34565b146118a3576040516232f00d60e71b815260040160405180910390fd5b5f6118ac61171c565b805460405163d47a948b60e01b81529192506001600160a01b03169063d47a948b906118dc908990600401612ecf565b602060405180830381865afa1580156118f7573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061191b9190612a1d565b1561193b578560405163f3c815f760e01b81526004016105609190612ecf565b806007018660405161194d9190612c95565b9081526040519081900360200190205460ff1615611980578560405163da1fb87960e01b81526004016105609190612ecf565b5f878152600a820160205260409020546001600160a01b0316156119ba57604051630517e2e760e21b815260048101889052602401610560565b86816005015411156119ef5760058101546040516301a0013b60e61b8152600481019190915260248101889052604401610560565b600281015461ffff6201000090910416611a0a600c83015490565b1015611a2c57611a1987611e96565b50611a2781600c0188611ebc565b611be2565b86611a3982600c01611800565b1015611ba757611a4887611e96565b50611a5681600c0188611ec9565b600b82018190555f908152600a82016020526040908190209051611a7d9160020190612b68565b604051908190038120600b83015490917fdbb7ff16cd6e3cc5c7aca1a615bf0d56f746d9f5708e12d52ebe243518b536cc905f90a3600b8101545f818152600a83016020526040902054611adc916001600160a01b0390911690611d8b565b8060070181600a015f83600b015481526020019081526020015f20600201604051611b079190612b68565b9081526040805160209281900383019020805460ff19169055600b8301545f908152600a8401909252812080546001600160a01b03191681556001810182905590611b556002830182612642565b611b62600383015f612642565b60048201805463ffffffff191681555f611b7f6005850182612679565b505060068201805463ffffffff191681555f611b9e6007850182612679565b50505050611be2565b611bb381600c01611800565b611bbe906001612a5c565b604051631a79674760e11b8152600481019190915260248101889052604401610560565b6040805160c08101825233815260208082018a81528284018a8152606084018a90526080840189905260a084018890525f8c8152600a870190935293909120825181546001600160a01b0319166001600160a01b039091161781559051600182015591519091906002820190611c589082612e00565b5060608201516003820190611c6d9082612e00565b506080820151805160048301805463ffffffff191663ffffffff9092169190911781556020808301518051611ca89260058701920190612694565b50505060a0820151805160068301805463ffffffff191663ffffffff9092169190911781556020808301518051611ce59260078701920190612694565b50505090505060018160070187604051611cff9190612c95565b908152604051908190036020018120805492151560ff1990931692909217909155611d2b908790612c95565b6040519081900381209088907f864a2110bb41c315e04bd6122b668384bca4b0d8509e55850db8347e86a95029905f90a350505050505050565b60015f80516020612f1683398151915255565b5f611d8582611ed7611edb565b92915050565b5f80516020612ef68339815191528054610378906001600160a01b03168484611f6c565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661082257604051631afcd79f60e31b815260040160405180910390fd5b611e00611daf565b611e08611fcb565b611e1d611e186020830183612a02565b611fdb565b610f88611e306040830160208401612a02565b82604001611fec565b611e41611daf565b5f80516020612ef68339815191526001600160a01b038216611e765760405163d92e233d60e01b815260040160405180910390fd5b80546001600160a01b0319166001600160a01b0392909216919091179055565b5f80516020612ef683398151915280545f91906109ae906001600160a01b031684612204565b61175a8282611ed7612210565b5f6109ae8383611ed7612241565b1190565b5f80611ee5845490565b9050805f03611ef857611ef8603161228e565b5f611f03858261229f565b5490505f611f14865f19850161229f565b548654909150869080611f2957611f29612ee1565b600190038181905f5260205f20015f9055905580611f525f885f0161229f90919063ffffffff16565b55611f63865f1985015f84896122c6565b50949350505050565b6040516001600160a01b0383811660248301526044820183905261037891859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506123ba565b611fd3611daf565b610822612426565b611fe3611daf565b610f888161242e565b611ff4611daf565b5f611ffd61171c565b90506001600160a01b0383166120265760405163d92e233d60e01b815260040160405180910390fd5b826001600160a01b03166309c1df666040518163ffffffff1660e01b8152600401602060405180830381865afa158015612062573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120869190612a83565b6001600160401b0316826040013510156120b9576040805163598c075960e01b8152908301356004820152602401610560565b6120c96040830160208401612c58565b6001600160401b03165f0361210d576120e86040830160208401612c58565b604051631bf6ffa560e21b81526001600160401b039091166004820152602401610560565b81608001355f03612131576040516309a501d360e21b815260040160405180910390fd5b80546001600160a01b0319166001600160a01b0384161781556121576020830183612bfa565b60028201805461ffff191661ffff9290921691909117905561217c6020830183612bfa565b60028201805461ffff92909216600160201b0265ffff00000000199092169190911790556121b06040830160208401612c58565b6002820180546001600160401b0392909216600160301b026dffffffffffffffff00000000000019909216919091179055604082013560038201556060820135600482015560809091013560059091015550565b5f6109ae833384612436565b5f612219845490565b84546001810186555f8681526020902001849055905061223b84828585612599565b50505050565b5f8061224b855490565b9050805f0361225e5761225e603161228e565b5f612269868261229f565b54905084612277875f61229f565b5561228586835f88886122c6565b95945050505050565b634e487b715f52806020526024601cfd5b5f826122be6122bb846122b7845f9081526020902090565b0190565b90565b949350505050565b6001600160ff1b03831015610ca25760028381026001810191018581101561236f575f6122f3888461229f565b5490505f612301898461229f565b549050612312828763ffffffff8816565b80612326575061232681878763ffffffff16565b15612368575f61234c858561233f86868b63ffffffff16565b1515918118919091021890565b90506123598a89836125e1565b6123668a8a838a8a6122c6565b505b5050610482565b85821015610482575f612382888461229f565b549050612393818663ffffffff8716565b156123b0576123a38887856125e1565b6123b088888588886122c6565b5050505050505050565b5f8060205f8451602086015f885af1806123d9576040513d5f823e3d81fd5b50505f513d915081156123f05780600114156123fd565b6001600160a01b0384163b155b1561223b57604051635274afe760e01b81526001600160a01b0385166004820152602401610560565b611d65611daf565b610f56611daf565b6040516370a0823160e01b81523060048201525f9081906001600160a01b038616906370a0823190602401602060405180830381865afa15801561247c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124a09190612a1d565b90506124b76001600160a01b038616853086612609565b6040516370a0823160e01b81523060048201525f906001600160a01b038716906370a0823190602401602060405180830381865afa1580156124fb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061251f9190612a1d565b90508181116125855760405162461bcd60e51b815260206004820152602c60248201527f5361666545524332305472616e7366657246726f6d3a2062616c616e6365206e60448201526b1bdd081a5b98dc99585cd95960a21b6064820152608401610560565b61258f8282612cb0565b9695505050505050565b821561223b5760025f198401045f6125b1868361229f565b5490506125c2818563ffffffff8616565b156125ce57505061223b565b6125d98686846125e1565b509250612599565b5f6125ec848461229f565b90505f6125f9858461229f565b8054835490915590915550505050565b6040516001600160a01b03848116602483015283811660448301526064820183905261223b9186918216906323b872dd90608401611f99565b50805461264e90612b36565b5f825580601f1061265d575050565b601f0160209004905f5260205f2090810190610f8891906126ef565b5080545f8255905f5260205f2090810190610f8891906126ef565b828054828255905f5260205f209081019282156126e7579160200282015b828111156126e757825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906126b2565b5061092e9291505b5b8082111561092e575f81556001016126f0565b803563ffffffff81168114612716575f80fd5b919050565b5f6020828403121561272b575f80fd5b6109ae82612703565b6001600160a01b0381168114610f88575f80fd5b5f8082840361010081121561275b575f80fd5b833561276681612734565b925060e0601f1982011215612779575f80fd5b506020830190509250929050565b5f60208284031215612797575f80fd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b604080519081016001600160401b03811182821017156127d4576127d461279e565b60405290565b604051601f8201601f191681016001600160401b03811182821017156128025761280261279e565b604052919050565b5f82601f830112612819575f80fd5b81356001600160401b038111156128325761283261279e565b612845601f8201601f19166020016127da565b818152846020838601011115612859575f80fd5b816020850160208301375f918101602001919091529392505050565b5f60408284031215612885575f80fd5b61288d6127b2565b905061289882612703565b81526020808301356001600160401b03808211156128b4575f80fd5b818501915085601f8301126128c7575f80fd5b8135818111156128d9576128d961279e565b8060051b91506128ea8483016127da565b8181529183018401918481019088841115612903575f80fd5b938501935b8385101561292d578435925061291d83612734565b8282529385019390850190612908565b808688015250505050505092915050565b5f805f805f60a08688031215612952575f80fd5b8535945060208601356001600160401b038082111561296f575f80fd5b61297b89838a0161280a565b95506040880135915080821115612990575f80fd5b61299c89838a0161280a565b945060608801359150808211156129b1575f80fd5b6129bd89838a01612875565b935060808801359150808211156129d2575f80fd5b506129df88828901612875565b9150509295509295909350565b5f60a082840312156129fc575f80fd5b50919050565b5f60208284031215612a12575f80fd5b81356109ae81612734565b5f60208284031215612a2d575f80fd5b5051919050565b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b80820180821115611d8557611d85612a48565b6001600160401b0381168114610f88575f80fd5b5f60208284031215612a93575f80fd5b81516109ae81612a6f565b5f60208284031215612aae575f80fd5b815160ff811681146109ae575f80fd5b6001600160401b03818116838216028082169190828114612ae157612ae1612a48565b505092915050565b5f6001600160401b0380841680612b0e57634e487b7160e01b5f52601260045260245ffd5b92169190910492915050565b5f61ffff821680612b2d57612b2d612a48565b5f190192915050565b600181811c90821680612b4a57607f821691505b6020821081036129fc57634e487b7160e01b5f52602260045260245ffd5b5f808354612b7581612b36565b60018281168015612b8d5760018114612ba257612bce565b60ff1984168752821515830287019450612bce565b875f526020805f205f5b85811015612bc55781548a820152908401908201612bac565b50505082870194505b50929695505050505050565b5f61ffff808316818103612bf057612bf0612a48565b6001019392505050565b5f60208284031215612c0a575f80fd5b813561ffff811681146109ae575f80fd5b61ffff828116828216039080821115612c3657612c36612a48565b5092915050565b61ffff818116838216019080821115612c3657612c36612a48565b5f60208284031215612c68575f80fd5b81356109ae81612a6f565b5f5b83811015612c8d578181015183820152602001612c75565b50505f910152565b5f8251612ca6818460208701612c73565b9190910192915050565b81810381811115611d8557611d85612a48565b5f8151808452612cda816020860160208601612c73565b601f01601f19169290920160200192915050565b5f6040830163ffffffff8351168452602080840151604060208701528281518085526060880191506020830194505f92505b80831015612d495784516001600160a01b03168252938301936001929092019190830190612d20565b509695505050505050565b60a081525f612d6660a0830188612cc3565b8281036020840152612d788188612cc3565b90508281036040840152612d8c8187612cee565b90508281036060840152612da08186612cee565b9150506001600160401b03831660808301529695505050505050565b601f82111561037857805f5260205f20601f840160051c81016020851015612de15750805b601f840160051c820191505b81811015610ca2575f8155600101612ded565b81516001600160401b03811115612e1957612e1961279e565b612e2d81612e278454612b36565b84612dbc565b602080601f831160018114612e60575f8415612e495750858301515b5f19600386901b1c1916600185901b178555610aa6565b5f85815260208120601f198616915b82811015612e8e57888601518255948401946001909101908401612e6f565b5085821015612eab57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b5f52603260045260245ffd5b602081525f6109ae6020830184612cc3565b634e487b7160e01b5f52603160045260245ffdfe04264d6e045c48d92b64fb3ce155b1f7a2673239fb0c9b60c505be1c17a7e7009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a2646970667358221220d3e3363e065203655c4cc30b15394cb615445d5020483bc3473843241baaad6164736f6c63430008190033",
}

// ERC20TokenSlotAuctionManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20TokenSlotAuctionManagerMetaData.ABI instead.
var ERC20TokenSlotAuctionManagerABI = ERC20TokenSlotAuctionManagerMetaData.ABI

// ERC20TokenSlotAuctionManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20TokenSlotAuctionManagerMetaData.Bin instead.
var ERC20TokenSlotAuctionManagerBin = ERC20TokenSlotAuctionManagerMetaData.Bin

// DeployERC20TokenSlotAuctionManager deploys a new Ethereum contract, binding an instance of ERC20TokenSlotAuctionManager to it.
func DeployERC20TokenSlotAuctionManager(auth *bind.TransactOpts, backend bind.ContractBackend, init uint8) (common.Address, *types.Transaction, *ERC20TokenSlotAuctionManager, error) {
	parsed, err := ERC20TokenSlotAuctionManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20TokenSlotAuctionManagerBin), backend, init)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20TokenSlotAuctionManager{ERC20TokenSlotAuctionManagerCaller: ERC20TokenSlotAuctionManagerCaller{contract: contract}, ERC20TokenSlotAuctionManagerTransactor: ERC20TokenSlotAuctionManagerTransactor{contract: contract}, ERC20TokenSlotAuctionManagerFilterer: ERC20TokenSlotAuctionManagerFilterer{contract: contract}}, nil
}

// ERC20TokenSlotAuctionManager is an auto generated Go binding around an Ethereum contract.
type ERC20TokenSlotAuctionManager struct {
	ERC20TokenSlotAuctionManagerCaller     // Read-only binding to the contract
	ERC20TokenSlotAuctionManagerTransactor // Write-only binding to the contract
	ERC20TokenSlotAuctionManagerFilterer   // Log filterer for contract events
}

// ERC20TokenSlotAuctionManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20TokenSlotAuctionManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20TokenSlotAuctionManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20TokenSlotAuctionManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20TokenSlotAuctionManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20TokenSlotAuctionManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20TokenSlotAuctionManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20TokenSlotAuctionManagerSession struct {
	Contract     *ERC20TokenSlotAuctionManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                 // Call options to use throughout this session
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ERC20TokenSlotAuctionManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20TokenSlotAuctionManagerCallerSession struct {
	Contract *ERC20TokenSlotAuctionManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                       // Call options to use throughout this session
}

// ERC20TokenSlotAuctionManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20TokenSlotAuctionManagerTransactorSession struct {
	Contract     *ERC20TokenSlotAuctionManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                       // Transaction auth options to use throughout this session
}

// ERC20TokenSlotAuctionManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20TokenSlotAuctionManagerRaw struct {
	Contract *ERC20TokenSlotAuctionManager // Generic contract binding to access the raw methods on
}

// ERC20TokenSlotAuctionManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20TokenSlotAuctionManagerCallerRaw struct {
	Contract *ERC20TokenSlotAuctionManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20TokenSlotAuctionManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20TokenSlotAuctionManagerTransactorRaw struct {
	Contract *ERC20TokenSlotAuctionManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20TokenSlotAuctionManager creates a new instance of ERC20TokenSlotAuctionManager, bound to a specific deployed contract.
func NewERC20TokenSlotAuctionManager(address common.Address, backend bind.ContractBackend) (*ERC20TokenSlotAuctionManager, error) {
	contract, err := bindERC20TokenSlotAuctionManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManager{ERC20TokenSlotAuctionManagerCaller: ERC20TokenSlotAuctionManagerCaller{contract: contract}, ERC20TokenSlotAuctionManagerTransactor: ERC20TokenSlotAuctionManagerTransactor{contract: contract}, ERC20TokenSlotAuctionManagerFilterer: ERC20TokenSlotAuctionManagerFilterer{contract: contract}}, nil
}

// NewERC20TokenSlotAuctionManagerCaller creates a new read-only instance of ERC20TokenSlotAuctionManager, bound to a specific deployed contract.
func NewERC20TokenSlotAuctionManagerCaller(address common.Address, caller bind.ContractCaller) (*ERC20TokenSlotAuctionManagerCaller, error) {
	contract, err := bindERC20TokenSlotAuctionManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerCaller{contract: contract}, nil
}

// NewERC20TokenSlotAuctionManagerTransactor creates a new write-only instance of ERC20TokenSlotAuctionManager, bound to a specific deployed contract.
func NewERC20TokenSlotAuctionManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20TokenSlotAuctionManagerTransactor, error) {
	contract, err := bindERC20TokenSlotAuctionManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerTransactor{contract: contract}, nil
}

// NewERC20TokenSlotAuctionManagerFilterer creates a new log filterer instance of ERC20TokenSlotAuctionManager, bound to a specific deployed contract.
func NewERC20TokenSlotAuctionManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20TokenSlotAuctionManagerFilterer, error) {
	contract, err := bindERC20TokenSlotAuctionManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerFilterer{contract: contract}, nil
}

// bindERC20TokenSlotAuctionManager binds a generic wrapper to an already deployed contract.
func bindERC20TokenSlotAuctionManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC20TokenSlotAuctionManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20TokenSlotAuctionManager.Contract.ERC20TokenSlotAuctionManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.ERC20TokenSlotAuctionManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.ERC20TokenSlotAuctionManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20TokenSlotAuctionManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.contract.Transact(opts, method, params...)
}

// ERC20 is a free data retrieval call binding the contract method 0xcc4aa204.
//
// Solidity: function ERC20() view returns(address)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) ERC20(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "ERC20")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ERC20 is a free data retrieval call binding the contract method 0xcc4aa204.
//
// Solidity: function ERC20() view returns(address)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) ERC20() (common.Address, error) {
	return _ERC20TokenSlotAuctionManager.Contract.ERC20(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// ERC20 is a free data retrieval call binding the contract method 0xcc4aa204.
//
// Solidity: function ERC20() view returns(address)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) ERC20() (common.Address, error) {
	return _ERC20TokenSlotAuctionManager.Contract.ERC20(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION is a free data retrieval call binding the contract method 0xab8dd52f.
//
// Solidity: function ERC20_TOKEN_SLOT_AUCTION_MANAGER_STORAGE_LOCATION() view returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "ERC20_TOKEN_SLOT_AUCTION_MANAGER_STORAGE_LOCATION")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION is a free data retrieval call binding the contract method 0xab8dd52f.
//
// Solidity: function ERC20_TOKEN_SLOT_AUCTION_MANAGER_STORAGE_LOCATION() view returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION() ([32]byte, error) {
	return _ERC20TokenSlotAuctionManager.Contract.ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION is a free data retrieval call binding the contract method 0xab8dd52f.
//
// Solidity: function ERC20_TOKEN_SLOT_AUCTION_MANAGER_STORAGE_LOCATION() view returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION() ([32]byte, error) {
	return _ERC20TokenSlotAuctionManager.Contract.ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// MinBidRequired is a free data retrieval call binding the contract method 0x913ed0b1.
//
// Solidity: function MinBidRequired() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) MinBidRequired(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "MinBidRequired")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinBidRequired is a free data retrieval call binding the contract method 0x913ed0b1.
//
// Solidity: function MinBidRequired() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) MinBidRequired() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.MinBidRequired(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// MinBidRequired is a free data retrieval call binding the contract method 0x913ed0b1.
//
// Solidity: function MinBidRequired() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) MinBidRequired() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.MinBidRequired(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// SLOTAUCTIONMANAGERSTORAGELOCATION is a free data retrieval call binding the contract method 0xaaab8516.
//
// Solidity: function SLOT_AUCTION_MANAGER_STORAGE_LOCATION() view returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) SLOTAUCTIONMANAGERSTORAGELOCATION(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "SLOT_AUCTION_MANAGER_STORAGE_LOCATION")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SLOTAUCTIONMANAGERSTORAGELOCATION is a free data retrieval call binding the contract method 0xaaab8516.
//
// Solidity: function SLOT_AUCTION_MANAGER_STORAGE_LOCATION() view returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) SLOTAUCTIONMANAGERSTORAGELOCATION() ([32]byte, error) {
	return _ERC20TokenSlotAuctionManager.Contract.SLOTAUCTIONMANAGERSTORAGELOCATION(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// SLOTAUCTIONMANAGERSTORAGELOCATION is a free data retrieval call binding the contract method 0xaaab8516.
//
// Solidity: function SLOT_AUCTION_MANAGER_STORAGE_LOCATION() view returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) SLOTAUCTIONMANAGERSTORAGELOCATION() ([32]byte, error) {
	return _ERC20TokenSlotAuctionManager.Contract.SLOTAUCTIONMANAGERSTORAGELOCATION(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetMinAuctionDuration is a free data retrieval call binding the contract method 0x9940d4c6.
//
// Solidity: function getMinAuctionDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetMinAuctionDuration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getMinAuctionDuration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinAuctionDuration is a free data retrieval call binding the contract method 0x9940d4c6.
//
// Solidity: function getMinAuctionDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetMinAuctionDuration() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetMinAuctionDuration(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetMinAuctionDuration is a free data retrieval call binding the contract method 0x9940d4c6.
//
// Solidity: function getMinAuctionDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetMinAuctionDuration() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetMinAuctionDuration(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetMinValidatorDuration is a free data retrieval call binding the contract method 0x01f6cec8.
//
// Solidity: function getMinValidatorDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetMinValidatorDuration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getMinValidatorDuration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinValidatorDuration is a free data retrieval call binding the contract method 0x01f6cec8.
//
// Solidity: function getMinValidatorDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetMinValidatorDuration() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetMinValidatorDuration(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetMinValidatorDuration is a free data retrieval call binding the contract method 0x01f6cec8.
//
// Solidity: function getMinValidatorDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetMinValidatorDuration() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetMinValidatorDuration(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetMinimumBid is a free data retrieval call binding the contract method 0xc5b63600.
//
// Solidity: function getMinimumBid() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetMinimumBid(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getMinimumBid")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinimumBid is a free data retrieval call binding the contract method 0xc5b63600.
//
// Solidity: function getMinimumBid() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetMinimumBid() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetMinimumBid(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetMinimumBid is a free data retrieval call binding the contract method 0xc5b63600.
//
// Solidity: function getMinimumBid() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetMinimumBid() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetMinimumBid(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetOpenValidatorSlots is a free data retrieval call binding the contract method 0x78eb9c10.
//
// Solidity: function getOpenValidatorSlots() view returns(uint16)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetOpenValidatorSlots(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getOpenValidatorSlots")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// GetOpenValidatorSlots is a free data retrieval call binding the contract method 0x78eb9c10.
//
// Solidity: function getOpenValidatorSlots() view returns(uint16)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetOpenValidatorSlots() (uint16, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetOpenValidatorSlots(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetOpenValidatorSlots is a free data retrieval call binding the contract method 0x78eb9c10.
//
// Solidity: function getOpenValidatorSlots() view returns(uint16)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetOpenValidatorSlots() (uint16, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetOpenValidatorSlots(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetTotalValidatorSlots is a free data retrieval call binding the contract method 0x31b6822e.
//
// Solidity: function getTotalValidatorSlots() view returns(uint16)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetTotalValidatorSlots(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getTotalValidatorSlots")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// GetTotalValidatorSlots is a free data retrieval call binding the contract method 0x31b6822e.
//
// Solidity: function getTotalValidatorSlots() view returns(uint16)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetTotalValidatorSlots() (uint16, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetTotalValidatorSlots(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetTotalValidatorSlots is a free data retrieval call binding the contract method 0x31b6822e.
//
// Solidity: function getTotalValidatorSlots() view returns(uint16)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetTotalValidatorSlots() (uint16, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetTotalValidatorSlots(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetValidatorWeight is a free data retrieval call binding the contract method 0x72684dd3.
//
// Solidity: function getValidatorWeight() view returns(uint64)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetValidatorWeight(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getValidatorWeight")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetValidatorWeight is a free data retrieval call binding the contract method 0x72684dd3.
//
// Solidity: function getValidatorWeight() view returns(uint64)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetValidatorWeight() (uint64, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetValidatorWeight(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetValidatorWeight is a free data retrieval call binding the contract method 0x72684dd3.
//
// Solidity: function getValidatorWeight() view returns(uint64)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetValidatorWeight() (uint64, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetValidatorWeight(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) Owner() (common.Address, error) {
	return _ERC20TokenSlotAuctionManager.Contract.Owner(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) Owner() (common.Address, error) {
	return _ERC20TokenSlotAuctionManager.Contract.Owner(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// CompleteRemoveInitialValidator is a paid mutator transaction binding the contract method 0x05af8256.
//
// Solidity: function completeRemoveInitialValidator(uint32 messageIndex) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) CompleteRemoveInitialValidator(opts *bind.TransactOpts, messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "completeRemoveInitialValidator", messageIndex)
}

// CompleteRemoveInitialValidator is a paid mutator transaction binding the contract method 0x05af8256.
//
// Solidity: function completeRemoveInitialValidator(uint32 messageIndex) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) CompleteRemoveInitialValidator(messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.CompleteRemoveInitialValidator(&_ERC20TokenSlotAuctionManager.TransactOpts, messageIndex)
}

// CompleteRemoveInitialValidator is a paid mutator transaction binding the contract method 0x05af8256.
//
// Solidity: function completeRemoveInitialValidator(uint32 messageIndex) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) CompleteRemoveInitialValidator(messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.CompleteRemoveInitialValidator(&_ERC20TokenSlotAuctionManager.TransactOpts, messageIndex)
}

// CompleteValidatorRegistration is a paid mutator transaction binding the contract method 0xa3a65e48.
//
// Solidity: function completeValidatorRegistration(uint32 messageIndex) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) CompleteValidatorRegistration(opts *bind.TransactOpts, messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "completeValidatorRegistration", messageIndex)
}

// CompleteValidatorRegistration is a paid mutator transaction binding the contract method 0xa3a65e48.
//
// Solidity: function completeValidatorRegistration(uint32 messageIndex) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) CompleteValidatorRegistration(messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.CompleteValidatorRegistration(&_ERC20TokenSlotAuctionManager.TransactOpts, messageIndex)
}

// CompleteValidatorRegistration is a paid mutator transaction binding the contract method 0xa3a65e48.
//
// Solidity: function completeValidatorRegistration(uint32 messageIndex) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) CompleteValidatorRegistration(messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.CompleteValidatorRegistration(&_ERC20TokenSlotAuctionManager.TransactOpts, messageIndex)
}

// CompleteValidatorRemoval is a paid mutator transaction binding the contract method 0x9681d940.
//
// Solidity: function completeValidatorRemoval(uint32 messageIndex) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) CompleteValidatorRemoval(opts *bind.TransactOpts, messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "completeValidatorRemoval", messageIndex)
}

// CompleteValidatorRemoval is a paid mutator transaction binding the contract method 0x9681d940.
//
// Solidity: function completeValidatorRemoval(uint32 messageIndex) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) CompleteValidatorRemoval(messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.CompleteValidatorRemoval(&_ERC20TokenSlotAuctionManager.TransactOpts, messageIndex)
}

// CompleteValidatorRemoval is a paid mutator transaction binding the contract method 0x9681d940.
//
// Solidity: function completeValidatorRemoval(uint32 messageIndex) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) CompleteValidatorRemoval(messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.CompleteValidatorRemoval(&_ERC20TokenSlotAuctionManager.TransactOpts, messageIndex)
}

// EndAuction is a paid mutator transaction binding the contract method 0xfe67a54b.
//
// Solidity: function endAuction() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) EndAuction(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "endAuction")
}

// EndAuction is a paid mutator transaction binding the contract method 0xfe67a54b.
//
// Solidity: function endAuction() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) EndAuction() (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.EndAuction(&_ERC20TokenSlotAuctionManager.TransactOpts)
}

// EndAuction is a paid mutator transaction binding the contract method 0xfe67a54b.
//
// Solidity: function endAuction() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) EndAuction() (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.EndAuction(&_ERC20TokenSlotAuctionManager.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x1a7f3eaa.
//
// Solidity: function initialize(address token, (address,address,(uint16,uint64,uint256,uint256,uint256)) settings) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) Initialize(opts *bind.TransactOpts, token common.Address, settings SlotAuctionManagerSettings) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "initialize", token, settings)
}

// Initialize is a paid mutator transaction binding the contract method 0x1a7f3eaa.
//
// Solidity: function initialize(address token, (address,address,(uint16,uint64,uint256,uint256,uint256)) settings) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) Initialize(token common.Address, settings SlotAuctionManagerSettings) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.Initialize(&_ERC20TokenSlotAuctionManager.TransactOpts, token, settings)
}

// Initialize is a paid mutator transaction binding the contract method 0x1a7f3eaa.
//
// Solidity: function initialize(address token, (address,address,(uint16,uint64,uint256,uint256,uint256)) settings) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) Initialize(token common.Address, settings SlotAuctionManagerSettings) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.Initialize(&_ERC20TokenSlotAuctionManager.TransactOpts, token, settings)
}

// InitiateAuction is a paid mutator transaction binding the contract method 0x5561f9df.
//
// Solidity: function initiateAuction() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) InitiateAuction(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "initiateAuction")
}

// InitiateAuction is a paid mutator transaction binding the contract method 0x5561f9df.
//
// Solidity: function initiateAuction() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) InitiateAuction() (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.InitiateAuction(&_ERC20TokenSlotAuctionManager.TransactOpts)
}

// InitiateAuction is a paid mutator transaction binding the contract method 0x5561f9df.
//
// Solidity: function initiateAuction() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) InitiateAuction() (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.InitiateAuction(&_ERC20TokenSlotAuctionManager.TransactOpts)
}

// InitiateRemoveInitialValidator is a paid mutator transaction binding the contract method 0xa476f675.
//
// Solidity: function initiateRemoveInitialValidator(bytes32 validationID) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) InitiateRemoveInitialValidator(opts *bind.TransactOpts, validationID [32]byte) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "initiateRemoveInitialValidator", validationID)
}

// InitiateRemoveInitialValidator is a paid mutator transaction binding the contract method 0xa476f675.
//
// Solidity: function initiateRemoveInitialValidator(bytes32 validationID) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) InitiateRemoveInitialValidator(validationID [32]byte) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.InitiateRemoveInitialValidator(&_ERC20TokenSlotAuctionManager.TransactOpts, validationID)
}

// InitiateRemoveInitialValidator is a paid mutator transaction binding the contract method 0xa476f675.
//
// Solidity: function initiateRemoveInitialValidator(bytes32 validationID) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) InitiateRemoveInitialValidator(validationID [32]byte) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.InitiateRemoveInitialValidator(&_ERC20TokenSlotAuctionManager.TransactOpts, validationID)
}

// InitiateValidatorRemoval is a paid mutator transaction binding the contract method 0xb6e6a2ca.
//
// Solidity: function initiateValidatorRemoval(bytes32 validationID) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) InitiateValidatorRemoval(opts *bind.TransactOpts, validationID [32]byte) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "initiateValidatorRemoval", validationID)
}

// InitiateValidatorRemoval is a paid mutator transaction binding the contract method 0xb6e6a2ca.
//
// Solidity: function initiateValidatorRemoval(bytes32 validationID) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) InitiateValidatorRemoval(validationID [32]byte) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.InitiateValidatorRemoval(&_ERC20TokenSlotAuctionManager.TransactOpts, validationID)
}

// InitiateValidatorRemoval is a paid mutator transaction binding the contract method 0xb6e6a2ca.
//
// Solidity: function initiateValidatorRemoval(bytes32 validationID) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) InitiateValidatorRemoval(validationID [32]byte) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.InitiateValidatorRemoval(&_ERC20TokenSlotAuctionManager.TransactOpts, validationID)
}

// PlaceBid is a paid mutator transaction binding the contract method 0xda4312a4.
//
// Solidity: function placeBid(uint256 bid, bytes nodeID, bytes blsPublicKey, (uint32,address[]) remainingBalanceOwner, (uint32,address[]) disableOwner) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) PlaceBid(opts *bind.TransactOpts, bid *big.Int, nodeID []byte, blsPublicKey []byte, remainingBalanceOwner PChainOwner, disableOwner PChainOwner) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "placeBid", bid, nodeID, blsPublicKey, remainingBalanceOwner, disableOwner)
}

// PlaceBid is a paid mutator transaction binding the contract method 0xda4312a4.
//
// Solidity: function placeBid(uint256 bid, bytes nodeID, bytes blsPublicKey, (uint32,address[]) remainingBalanceOwner, (uint32,address[]) disableOwner) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) PlaceBid(bid *big.Int, nodeID []byte, blsPublicKey []byte, remainingBalanceOwner PChainOwner, disableOwner PChainOwner) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.PlaceBid(&_ERC20TokenSlotAuctionManager.TransactOpts, bid, nodeID, blsPublicKey, remainingBalanceOwner, disableOwner)
}

// PlaceBid is a paid mutator transaction binding the contract method 0xda4312a4.
//
// Solidity: function placeBid(uint256 bid, bytes nodeID, bytes blsPublicKey, (uint32,address[]) remainingBalanceOwner, (uint32,address[]) disableOwner) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) PlaceBid(bid *big.Int, nodeID []byte, blsPublicKey []byte, remainingBalanceOwner PChainOwner, disableOwner PChainOwner) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.PlaceBid(&_ERC20TokenSlotAuctionManager.TransactOpts, bid, nodeID, blsPublicKey, remainingBalanceOwner, disableOwner)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.RenounceOwnership(&_ERC20TokenSlotAuctionManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.RenounceOwnership(&_ERC20TokenSlotAuctionManager.TransactOpts)
}

// SetSlotAuctionSettings is a paid mutator transaction binding the contract method 0xe4c822ca.
//
// Solidity: function setSlotAuctionSettings((uint16,uint64,uint256,uint256,uint256) auctionSettings) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) SetSlotAuctionSettings(opts *bind.TransactOpts, auctionSettings AuctionSettings) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "setSlotAuctionSettings", auctionSettings)
}

// SetSlotAuctionSettings is a paid mutator transaction binding the contract method 0xe4c822ca.
//
// Solidity: function setSlotAuctionSettings((uint16,uint64,uint256,uint256,uint256) auctionSettings) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) SetSlotAuctionSettings(auctionSettings AuctionSettings) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.SetSlotAuctionSettings(&_ERC20TokenSlotAuctionManager.TransactOpts, auctionSettings)
}

// SetSlotAuctionSettings is a paid mutator transaction binding the contract method 0xe4c822ca.
//
// Solidity: function setSlotAuctionSettings((uint16,uint64,uint256,uint256,uint256) auctionSettings) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) SetSlotAuctionSettings(auctionSettings AuctionSettings) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.SetSlotAuctionSettings(&_ERC20TokenSlotAuctionManager.TransactOpts, auctionSettings)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.TransferOwnership(&_ERC20TokenSlotAuctionManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.TransferOwnership(&_ERC20TokenSlotAuctionManager.TransactOpts, newOwner)
}

// ERC20TokenSlotAuctionManagerBidEvictedIterator is returned from FilterBidEvicted and is used to iterate over the raw logs and unpacked data for BidEvicted events raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerBidEvictedIterator struct {
	Event *ERC20TokenSlotAuctionManagerBidEvicted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenSlotAuctionManagerBidEvictedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenSlotAuctionManagerBidEvicted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenSlotAuctionManagerBidEvicted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenSlotAuctionManagerBidEvictedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenSlotAuctionManagerBidEvictedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenSlotAuctionManagerBidEvicted represents a BidEvicted event raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerBidEvicted struct {
	Bid    *big.Int
	NodeID common.Hash
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBidEvicted is a free log retrieval operation binding the contract event 0xdbb7ff16cd6e3cc5c7aca1a615bf0d56f746d9f5708e12d52ebe243518b536cc.
//
// Solidity: event BidEvicted(uint256 indexed bid, bytes indexed nodeID)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) FilterBidEvicted(opts *bind.FilterOpts, bid []*big.Int, nodeID [][]byte) (*ERC20TokenSlotAuctionManagerBidEvictedIterator, error) {

	var bidRule []interface{}
	for _, bidItem := range bid {
		bidRule = append(bidRule, bidItem)
	}
	var nodeIDRule []interface{}
	for _, nodeIDItem := range nodeID {
		nodeIDRule = append(nodeIDRule, nodeIDItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.FilterLogs(opts, "BidEvicted", bidRule, nodeIDRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerBidEvictedIterator{contract: _ERC20TokenSlotAuctionManager.contract, event: "BidEvicted", logs: logs, sub: sub}, nil
}

// WatchBidEvicted is a free log subscription operation binding the contract event 0xdbb7ff16cd6e3cc5c7aca1a615bf0d56f746d9f5708e12d52ebe243518b536cc.
//
// Solidity: event BidEvicted(uint256 indexed bid, bytes indexed nodeID)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) WatchBidEvicted(opts *bind.WatchOpts, sink chan<- *ERC20TokenSlotAuctionManagerBidEvicted, bid []*big.Int, nodeID [][]byte) (event.Subscription, error) {

	var bidRule []interface{}
	for _, bidItem := range bid {
		bidRule = append(bidRule, bidItem)
	}
	var nodeIDRule []interface{}
	for _, nodeIDItem := range nodeID {
		nodeIDRule = append(nodeIDRule, nodeIDItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.WatchLogs(opts, "BidEvicted", bidRule, nodeIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenSlotAuctionManagerBidEvicted)
				if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "BidEvicted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBidEvicted is a log parse operation binding the contract event 0xdbb7ff16cd6e3cc5c7aca1a615bf0d56f746d9f5708e12d52ebe243518b536cc.
//
// Solidity: event BidEvicted(uint256 indexed bid, bytes indexed nodeID)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) ParseBidEvicted(log types.Log) (*ERC20TokenSlotAuctionManagerBidEvicted, error) {
	event := new(ERC20TokenSlotAuctionManagerBidEvicted)
	if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "BidEvicted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenSlotAuctionManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerInitializedIterator struct {
	Event *ERC20TokenSlotAuctionManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenSlotAuctionManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenSlotAuctionManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenSlotAuctionManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenSlotAuctionManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenSlotAuctionManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenSlotAuctionManagerInitialized represents a Initialized event raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*ERC20TokenSlotAuctionManagerInitializedIterator, error) {

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerInitializedIterator{contract: _ERC20TokenSlotAuctionManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ERC20TokenSlotAuctionManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenSlotAuctionManagerInitialized)
				if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) ParseInitialized(log types.Log) (*ERC20TokenSlotAuctionManagerInitialized, error) {
	event := new(ERC20TokenSlotAuctionManagerInitialized)
	if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator is returned from FilterInitiatedAuctionValidatorRegistration and is used to iterate over the raw logs and unpacked data for InitiatedAuctionValidatorRegistration events raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator struct {
	Event *ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration represents a InitiatedAuctionValidatorRegistration event raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration struct {
	ValidationID     [32]byte
	OwnerAddress     common.Address
	ValidatorEndTime *big.Int
	Weight           uint64
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterInitiatedAuctionValidatorRegistration is a free log retrieval operation binding the contract event 0x032100a60b84cf31291641706872970585d53fa5be412562041fbf66a99ce285.
//
// Solidity: event InitiatedAuctionValidatorRegistration(bytes32 indexed validationID, address indexed ownerAddress, uint256 validatorEndTime, uint64 weight)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) FilterInitiatedAuctionValidatorRegistration(opts *bind.FilterOpts, validationID [][32]byte, ownerAddress []common.Address) (*ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator, error) {

	var validationIDRule []interface{}
	for _, validationIDItem := range validationID {
		validationIDRule = append(validationIDRule, validationIDItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.FilterLogs(opts, "InitiatedAuctionValidatorRegistration", validationIDRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator{contract: _ERC20TokenSlotAuctionManager.contract, event: "InitiatedAuctionValidatorRegistration", logs: logs, sub: sub}, nil
}

// WatchInitiatedAuctionValidatorRegistration is a free log subscription operation binding the contract event 0x032100a60b84cf31291641706872970585d53fa5be412562041fbf66a99ce285.
//
// Solidity: event InitiatedAuctionValidatorRegistration(bytes32 indexed validationID, address indexed ownerAddress, uint256 validatorEndTime, uint64 weight)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) WatchInitiatedAuctionValidatorRegistration(opts *bind.WatchOpts, sink chan<- *ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration, validationID [][32]byte, ownerAddress []common.Address) (event.Subscription, error) {

	var validationIDRule []interface{}
	for _, validationIDItem := range validationID {
		validationIDRule = append(validationIDRule, validationIDItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.WatchLogs(opts, "InitiatedAuctionValidatorRegistration", validationIDRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration)
				if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "InitiatedAuctionValidatorRegistration", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiatedAuctionValidatorRegistration is a log parse operation binding the contract event 0x032100a60b84cf31291641706872970585d53fa5be412562041fbf66a99ce285.
//
// Solidity: event InitiatedAuctionValidatorRegistration(bytes32 indexed validationID, address indexed ownerAddress, uint256 validatorEndTime, uint64 weight)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) ParseInitiatedAuctionValidatorRegistration(log types.Log) (*ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration, error) {
	event := new(ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration)
	if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "InitiatedAuctionValidatorRegistration", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator is returned from FilterNewValidatorAuction and is used to iterate over the raw logs and unpacked data for NewValidatorAuction events raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator struct {
	Event *ERC20TokenSlotAuctionManagerNewValidatorAuction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenSlotAuctionManagerNewValidatorAuction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenSlotAuctionManagerNewValidatorAuction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenSlotAuctionManagerNewValidatorAuction represents a NewValidatorAuction event raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerNewValidatorAuction struct {
	ValidatorSlots       uint16
	ValidatorWeight      uint64
	MinValidatorDuration *big.Int
	AuctionEndTime       *big.Int
	MinimumBid           *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterNewValidatorAuction is a free log retrieval operation binding the contract event 0x50e40b07b3cd91a269f83830c35b4c090f74ebd0cc06dce4db251ccc23627b54.
//
// Solidity: event NewValidatorAuction(uint16 validatorSlots, uint64 validatorWeight, uint256 minValidatorDuration, uint256 auctionEndTime, uint256 minimumBid)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) FilterNewValidatorAuction(opts *bind.FilterOpts) (*ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator, error) {

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.FilterLogs(opts, "NewValidatorAuction")
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator{contract: _ERC20TokenSlotAuctionManager.contract, event: "NewValidatorAuction", logs: logs, sub: sub}, nil
}

// WatchNewValidatorAuction is a free log subscription operation binding the contract event 0x50e40b07b3cd91a269f83830c35b4c090f74ebd0cc06dce4db251ccc23627b54.
//
// Solidity: event NewValidatorAuction(uint16 validatorSlots, uint64 validatorWeight, uint256 minValidatorDuration, uint256 auctionEndTime, uint256 minimumBid)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) WatchNewValidatorAuction(opts *bind.WatchOpts, sink chan<- *ERC20TokenSlotAuctionManagerNewValidatorAuction) (event.Subscription, error) {

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.WatchLogs(opts, "NewValidatorAuction")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenSlotAuctionManagerNewValidatorAuction)
				if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "NewValidatorAuction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewValidatorAuction is a log parse operation binding the contract event 0x50e40b07b3cd91a269f83830c35b4c090f74ebd0cc06dce4db251ccc23627b54.
//
// Solidity: event NewValidatorAuction(uint16 validatorSlots, uint64 validatorWeight, uint256 minValidatorDuration, uint256 auctionEndTime, uint256 minimumBid)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) ParseNewValidatorAuction(log types.Log) (*ERC20TokenSlotAuctionManagerNewValidatorAuction, error) {
	event := new(ERC20TokenSlotAuctionManagerNewValidatorAuction)
	if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "NewValidatorAuction", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenSlotAuctionManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerOwnershipTransferredIterator struct {
	Event *ERC20TokenSlotAuctionManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenSlotAuctionManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenSlotAuctionManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenSlotAuctionManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenSlotAuctionManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenSlotAuctionManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenSlotAuctionManagerOwnershipTransferred represents a OwnershipTransferred event raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ERC20TokenSlotAuctionManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerOwnershipTransferredIterator{contract: _ERC20TokenSlotAuctionManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ERC20TokenSlotAuctionManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenSlotAuctionManagerOwnershipTransferred)
				if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) ParseOwnershipTransferred(log types.Log) (*ERC20TokenSlotAuctionManagerOwnershipTransferred, error) {
	event := new(ERC20TokenSlotAuctionManagerOwnershipTransferred)
	if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator is returned from FilterSuccessfulBidPlaced and is used to iterate over the raw logs and unpacked data for SuccessfulBidPlaced events raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator struct {
	Event *ERC20TokenSlotAuctionManagerSuccessfulBidPlaced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenSlotAuctionManagerSuccessfulBidPlaced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenSlotAuctionManagerSuccessfulBidPlaced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenSlotAuctionManagerSuccessfulBidPlaced represents a SuccessfulBidPlaced event raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerSuccessfulBidPlaced struct {
	Bid    *big.Int
	NodeID common.Hash
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSuccessfulBidPlaced is a free log retrieval operation binding the contract event 0x864a2110bb41c315e04bd6122b668384bca4b0d8509e55850db8347e86a95029.
//
// Solidity: event SuccessfulBidPlaced(uint256 indexed bid, bytes indexed nodeID)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) FilterSuccessfulBidPlaced(opts *bind.FilterOpts, bid []*big.Int, nodeID [][]byte) (*ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator, error) {

	var bidRule []interface{}
	for _, bidItem := range bid {
		bidRule = append(bidRule, bidItem)
	}
	var nodeIDRule []interface{}
	for _, nodeIDItem := range nodeID {
		nodeIDRule = append(nodeIDRule, nodeIDItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.FilterLogs(opts, "SuccessfulBidPlaced", bidRule, nodeIDRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator{contract: _ERC20TokenSlotAuctionManager.contract, event: "SuccessfulBidPlaced", logs: logs, sub: sub}, nil
}

// WatchSuccessfulBidPlaced is a free log subscription operation binding the contract event 0x864a2110bb41c315e04bd6122b668384bca4b0d8509e55850db8347e86a95029.
//
// Solidity: event SuccessfulBidPlaced(uint256 indexed bid, bytes indexed nodeID)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) WatchSuccessfulBidPlaced(opts *bind.WatchOpts, sink chan<- *ERC20TokenSlotAuctionManagerSuccessfulBidPlaced, bid []*big.Int, nodeID [][]byte) (event.Subscription, error) {

	var bidRule []interface{}
	for _, bidItem := range bid {
		bidRule = append(bidRule, bidItem)
	}
	var nodeIDRule []interface{}
	for _, nodeIDItem := range nodeID {
		nodeIDRule = append(nodeIDRule, nodeIDItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.WatchLogs(opts, "SuccessfulBidPlaced", bidRule, nodeIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenSlotAuctionManagerSuccessfulBidPlaced)
				if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "SuccessfulBidPlaced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSuccessfulBidPlaced is a log parse operation binding the contract event 0x864a2110bb41c315e04bd6122b668384bca4b0d8509e55850db8347e86a95029.
//
// Solidity: event SuccessfulBidPlaced(uint256 indexed bid, bytes indexed nodeID)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) ParseSuccessfulBidPlaced(log types.Log) (*ERC20TokenSlotAuctionManagerSuccessfulBidPlaced, error) {
	event := new(ERC20TokenSlotAuctionManagerSuccessfulBidPlaced)
	if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "SuccessfulBidPlaced", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
