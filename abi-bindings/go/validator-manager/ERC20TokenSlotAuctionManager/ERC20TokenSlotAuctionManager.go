// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc20tokenslotauctionmanager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ava-labs/libevm"
	"github.com/ava-labs/libevm/common"
	"github.com/ava-labs/libevm/core/types"
	"github.com/ava-labs/libevm/event"
	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/accounts/abi/bind"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AuctionSettings is an auto generated low-level Go binding around an user-defined struct.
type AuctionSettings struct {
	TotalValidatorSlots     uint16
	Weight                  uint64
	MinValidatorDuration    *big.Int
	MinAuctionDuration      *big.Int
	MinimumBid              *big.Int
	AuctionCooldownDuration *big.Int
}

// PChainOwner is an auto generated low-level Go binding around an user-defined struct.
type PChainOwner struct {
	Threshold uint32
	Addresses []common.Address
}

// SlotAuctionManagerSettings is an auto generated low-level Go binding around an user-defined struct.
type SlotAuctionManagerSettings struct {
	Admin           common.Address
	Manager         common.Address
	AuctionSettings AuctionSettings
}

// ERC20TokenSlotAuctionManagerMetaData contains all meta data concerning the ERC20TokenSlotAuctionManager contract.
var ERC20TokenSlotAuctionManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"enumICMInitializable\",\"name\":\"init\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionEndTime\",\"type\":\"uint256\"}],\"name\":\"AuctionEndTimeNotReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionCooldownEndtime\",\"type\":\"uint256\"}],\"name\":\"AuctionInCooldown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionInProgress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotInProgress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minumumBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBid\",\"type\":\"uint256\"}],\"name\":\"BidSmallerThanMinimum\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"DuplicateBidInContention\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"}],\"name\":\"DuplicateNodeIDInContention\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"smallestAcceptableBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBid\",\"type\":\"uint256\"}],\"name\":\"InsufficientBidToWinAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumValidationDuration\",\"type\":\"uint256\"}],\"name\":\"InvalidMinValidatorDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoOpenValidatorSlots\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"}],\"name\":\"NodeIsValidator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"validationTimeLimit\",\"type\":\"uint256\"}],\"name\":\"ValidatorTimeLimitNotPassed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"validatorWeight\",\"type\":\"uint64\"}],\"name\":\"ValidatorWeightTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroMinBid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroWeight\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"}],\"name\":\"BidEvicted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"validationID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"}],\"name\":\"InitiatedAuctionValidatorRegistration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"validatorSlots\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"validatorWeight\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minValidatorDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumBid\",\"type\":\"uint256\"}],\"name\":\"NewValidatorAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"}],\"name\":\"SuccessfulBidPlaced\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC20_TOKEN_SLOT_AUCTION_MANAGER_STORAGE_LOCATION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLOT_AUCTION_MANAGER_STORAGE_LOCATION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"messageIndex\",\"type\":\"uint32\"}],\"name\":\"completeValidatorRegistration\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"messageIndex\",\"type\":\"uint32\"}],\"name\":\"completeValidatorRemoval\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"contractIERC20Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionCooldownDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctioningValidatorWeight\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinAuctionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinValidatorDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpenValidatorSlots\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValidatorSlots\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20Mintable\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contractIValidatorManager\",\"name\":\"manager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"totalValidatorSlots\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"minValidatorDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAuctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionCooldownDuration\",\"type\":\"uint256\"}],\"internalType\":\"structAuctionSettings\",\"name\":\"auctionSettings\",\"type\":\"tuple\"}],\"internalType\":\"structSlotAuctionManagerSettings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"validationID\",\"type\":\"bytes32\"}],\"name\":\"initiateValidatorRemoval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blsPublicKey\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"threshold\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"internalType\":\"structPChainOwner\",\"name\":\"remainingBalanceOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"threshold\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"internalType\":\"structPChainOwner\",\"name\":\"disableOwner\",\"type\":\"tuple\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"totalValidatorSlots\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"minValidatorDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAuctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionCooldownDuration\",\"type\":\"uint256\"}],\"internalType\":\"structAuctionSettings\",\"name\":\"auctionSettings\",\"type\":\"tuple\"}],\"name\":\"setSlotAuctionSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f80fd5b50604051612b91380380612b9183398101604081905261002e91610107565b60018160018111156100425761004261012c565b0361004f5761004f610055565b50610140565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156100a55760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146101045780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b5f60208284031215610117575f80fd5b815160028110610125575f80fd5b9392505050565b634e487b7160e01b5f52602160045260245ffd5b612a448061014d5f395ff3fe608060405234801561000f575f80fd5b506004361061013d575f3560e01c8063a3a65e48116100b4578063da4312a411610079578063da4312a414610270578063e236644314610283578063f1c7b8d214610296578063f2fde38b1461029e578063f714b6aa146102b1578063fe67a54b146102b9575f80fd5b8063a3a65e4814610207578063aaab85161461021a578063ab8dd52f14610241578063b6e6a2ca14610255578063c5b6360014610268575f80fd5b8063715018a611610105578063715018a6146101b4578063785e9e86146101bc57806378eb9c10146101dc5780638da5cb5b146101e45780639681d940146101ec5780639940d4c6146101ff575f80fd5b806301f6cec814610141578063267579b61461015c57806331b6822e146101715780635561f9df1461018c578063671ef47714610194575b5f80fd5b6101496102c1565b6040519081526020015b60405180910390f35b61016f61016a3660046121f6565b6102d5565b005b6101796103b5565b60405161ffff9091168152602001610153565b61016f6103d1565b61019c610717565b6040516001600160401b039091168152602001610153565b61016f610734565b6101c4610747565b6040516001600160a01b039091168152602001610153565b610179610768565b6101c461079b565b6101496101fa366004612224565b6107c3565b6101496108f2565b610149610215366004612224565b610906565b6101497f6494e1e6ac2d5f44a06b929c1549cec0c499347f244a852c37aef6b6707be60081565b6101495f805160206129cf83398151915281565b61016f61026336600461223d565b610988565b610149610a3b565b61016f61027e366004612408565b610a4f565b61016f6102913660046124b6565b610a81565b610149610b8f565b61016f6102ac3660046124f6565b610c24565b610149610c61565b61016f610c75565b5f806102cb6112e9565b6002015492915050565b5f6102de6112e9565b90505f8154600160a01b900460ff1660028111156102fe576102fe612511565b1461031c57604051639bbb1f3b60e01b815260040160405180910390fd5b61032461130d565b5f61032d6112e9565b90506103388361133f565b6103456020840184612525565b815461ffff91909116600160a81b0261ffff60a81b199091161781556060830135600382015560408301803560028301556080840135600483015561038d906020850161255a565b600191909101805467ffffffffffffffff19166001600160401b039092169190911790555050565b5f806103bf6112e9565b54600160a81b900461ffff1692915050565b5f6103da6112e9565b90505f8154600160a01b900460ff1660028111156103fa576103fa612511565b1461041857604051639bbb1f3b60e01b815260040160405180910390fd5b5f6104216112e9565b90508060060154421015610459578060060154604051638fc300c160e01b815260040161045091815260200190565b60405180910390fd5b5f6104626112e9565b805460ff60a01b1916600160a01b17815560038101549091506104859042612589565b600782015560048101546008820155805461ffff600160a81b82048116600160c81b90920416036104c9576040516327388c6f60e21b815260040160405180910390fd5b60018101545f906104e4906001600160401b0316606461259c565b825460408051631761632760e31b815290516001600160a01b039092169163bb0b1938916004808201926020929091908290030181865afa15801561052b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061054f91906125c7565b835460408051633002a2bb60e21b815290516001600160a01b039092169163c00a8aec916004808201926020929091908290030181865afa158015610596573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105ba91906125e2565b60ff166105c7919061259c565b6105d19190612602565b9050806001600160401b03165f0361060d576001820154604051632bfe056160e01b81526001600160401b039091166004820152602401610450565b815461062d9061ffff600160c81b8204811691600160a81b900416612633565b61ffff16816001600160401b031611156106825781546106619061ffff600160c81b8204811691600160a81b900416612633565b825461ffff91909116600160b81b0261ffff60b81b1990911617825561069b565b815461ffff60b81b1916600160b81b61ffff8316021782555b8154600183015460028401546007850154600486015460408051600160b81b90960461ffff1686526001600160401b03909416602086015292840191909152606083015260808201527f50e40b07b3cd91a269f83830c35b4c090f74ebd0cc06dce4db251ccc23627b549060a00160405180910390a150505050565b5f806107216112e9565b600101546001600160401b031692915050565b61073c61130d565b6107455f61139b565b565b5f805f805160206129cf8339815191525b546001600160a01b031692915050565b5f806107726112e9565b80549091506107959061ffff600160c81b8204811691600160a81b900416612633565b91505090565b5f807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300610758565b5f806107cd6112e9565b805460405163025a076560e61b815263ffffffff861660048201529192505f916001600160a01b0390911690639681d940906024016020604051808303815f875af115801561081e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108429190612655565b5f818152600a8401602052604090206001015490915015610893578154829060199061087890600160c81b900461ffff1661266c565b91906101000a81548161ffff021916908361ffff1602179055505b5f818152600a83016020526040812080546001600160a01b031916815560018101829055906108c56002830182612135565b6108d2600383015f612135565b505f6004820155600501805467ffffffffffffffff191690559392505050565b5f806108fc6112e9565b6003015492915050565b5f806109106112e9565b8054604051631474cbc960e31b815263ffffffff861660048201529192506001600160a01b03169063a3a65e48906024016020604051808303815f875af115801561095d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109819190612655565b9392505050565b5f6109916112e9565b5f838152600a82016020526040902060010154909150421115610a0a578054604051635b73516560e11b8152600481018490526001600160a01b039091169063b6e6a2ca906024015f604051808303815f87803b1580156109f0575f80fd5b505af1158015610a02573d5f803e3d5ffd5b505050505050565b5f828152600a8201602052604090819020600101549051631a936b7b60e11b81526004810191909152602401610450565b5f80610a456112e9565b6004015492915050565b610a5761140b565b610a648585858585611442565b610a7a60015f805160206129ef83398151915255565b5050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03165f81158015610ac55750825b90505f826001600160401b03166001148015610ae05750303b155b905081158015610aee575080155b15610b0c5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610b3657845460ff60401b1916600160401b1785555b610b408787611949565b8315610b8657845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b5f80610b996112e9565b905060018154600160a01b900460ff166002811115610bba57610bba612511565b14610bd7576040516232f00d60e71b815260040160405180910390fd5b5f610be06112e9565b8054600c820154919250600160a81b900461ffff161115610c05576004015491505090565b610c1181600c01611967565b610c1c906001612589565b9250505b5090565b610c2c61130d565b6001600160a01b038116610c5557604051631e4fbdf760e01b81525f6004820152602401610450565b610c5e8161139b565b50565b5f80610c6b6112e9565b6005015492915050565b610c7d61140b565b5f610c866112e9565b905060018154600160a01b900460ff166002811115610ca757610ca7612511565b14610cc4576040516232f00d60e71b815260040160405180910390fd5b5f610ccd6112e9565b90508060070154421015610cfc578060070154604051638230260760e01b815260040161045091815260200190565b6005810154610d0b9042612589565b6006820155805460ff60a01b1916600160a11b1781555b5f610d2e82600c015490565b11156112bd575f610d4182600c0161198c565b5f818152600b840160209081526040808320815160c08101835281546001600160a01b0316815260018201549381019390935260028101805495965093949293909291840191610d9090612688565b80601f0160208091040260200160405190810160405280929190818152602001828054610dbc90612688565b8015610e075780601f10610dde57610100808354040283529160200191610e07565b820191905f5260205f20905b815481529060010190602001808311610dea57829003601f168201915b50505050508152602001600382018054610e2090612688565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4c90612688565b8015610e975780601f10610e6e57610100808354040283529160200191610e97565b820191905f5260205f20905b815481529060010190602001808311610e7a57829003601f168201915b505050918352505060408051808201825260048401805463ffffffff168252600585018054845160208281028201810190965281815295850195939492938584019390929190830182828015610f1457602002820191905f5260205f20905b81546001600160a01b03168152600190910190602001808311610ef6575b50505091909252505050815260408051808201825260068401805463ffffffff168252600785018054845160208281028201810190965281815295850195939492938584019390929190830182828015610f9557602002820191905f5260205f20905b81546001600160a01b03168152600190910190602001808311610f77575b505050919092525050509052505f838152600b85016020526040812080546001600160a01b031916815560018101829055919250610fd66002830182612135565b610fe3600383015f612135565b60048201805463ffffffff191681555f611000600585018261216c565b505060068201805463ffffffff191681555f61101f600785018261216c565b5050505082600901816040015160405161103991906126dc565b908152604051908190036020019020805460ff19169055600883015461105f90836126f7565b1561107f578051600884015461107f919061107a90856126f7565b61199f565b8254839060199061109a90600160c81b900461ffff1661270a565b825461ffff9182166101009390930a928302919092021990911617905582546040808301516060840151608085015160a086015160018901549451634e5bb12760e11b81525f966001600160a01b031695639cb7624e9561110f9590949093909290916001600160401b0316906004016127bb565b6020604051808303815f875af115801561112b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061114f9190612655565b9050815f01516001600160a01b0316817f032100a60b84cf31291641706872970585d53fa5be412562041fbf66a99ce285866007015487600201546111949190612589565b6001880154604080519283526001600160401b0390911660208301520160405180910390a36040518060c00160405280835f01516001600160a01b03168152602001856007015486600201546111ea9190612589565b81526040848101516020808401919091526060808701518385015283018590526001888101546001600160401b03166080909401939093525f858152600a89018252829020845181546001600160a01b0319166001600160a01b03909116178155908401519281019290925582015160028201906112689082612867565b506060820151600382019061127d9082612867565b506080820151600482015560a0909101516005909101805467ffffffffffffffff19166001600160401b0390921691909117905550506008820155610d22565b5f6007820155805464ffff0000ff60a01b191690555061074560015f805160206129ef83398151915255565b7f6494e1e6ac2d5f44a06b929c1549cec0c499347f244a852c37aef6b6707be60090565b3361131661079b565b6001600160a01b0316146107455760405163118cdaa760e01b8152336004820152602401610450565b61134f604082016020830161255a565b6001600160401b03165f03611377576040516319a2a9bd60e01b815260040160405180910390fd5b80608001355f03610c5e576040516309a501d360e21b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f805160206129ef83398151915280546001190161143c57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b5f61144b6112e9565b905060018154600160a01b900460ff16600281111561146c5761146c612511565b14611489576040516232f00d60e71b815260040160405180910390fd5b5f6114926112e9565b805460405163d47a948b60e01b81529192506001600160a01b03169063d47a948b906114c2908990600401612922565b602060405180830381865afa1580156114dd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115019190612655565b15611521578560405163f3c815f760e01b81526004016104509190612922565b806009018660405161153391906126dc565b9081526040519081900360200190205460ff1615611566578560405163da1fb87960e01b81526004016104509190612922565b5f878152600b820160205260409020546001600160a01b0316156115a057604051630517e2e760e21b815260048101889052602401610450565b86816004015411156115d2576004818101546040516301a0013b60e61b81529182015260248101889052604401610450565b805461ffff600160b81b909104166115eb600c83015490565b101561160d576115fa876119c8565b5061160881600c01886119ee565b6117b3565b8661161a82600c01611967565b101561177857611629876119c8565b505f61163882600c01896119fb565b905081600b015f8281526020019081526020015f2060020160405161165d9190612934565b6040519081900381209082907fdbb7ff16cd6e3cc5c7aca1a615bf0d56f746d9f5708e12d52ebe243518b536cc905f90a35f818152600b830160205260409020546116b1906001600160a01b03168261199f565b8160090182600b015f8381526020019081526020015f206002016040516116d89190612934565b9081526040805160209281900383019020805460ff191690555f838152600b8501909252812080546001600160a01b031916815560018101829055906117216002830182612135565b61172e600383015f612135565b60048201805463ffffffff191681555f61174b600585018261216c565b505060068201805463ffffffff191681555f61176a600785018261216c565b5050505060088201556117b3565b61178481600c01611967565b61178f906001612589565b604051631a79674760e11b8152600481019190915260248101889052604401610450565b6040805160c08101825233815260208082018a81528284018a8152606084018a90526080840189905260a084018890525f8c8152600b870190935293909120825181546001600160a01b0319166001600160a01b0390911617815590516001820155915190919060028201906118299082612867565b506060820151600382019061183e9082612867565b506080820151805160048301805463ffffffff191663ffffffff90921691909117815560208083015180516118799260058701920190612187565b50505060a0820151805160068301805463ffffffff191663ffffffff90921691909117815560208083015180516118b69260078701920190612187565b505050905050600181600901876040516118d091906126dc565b908152604051908190036020018120805492151560ff19909316929092179091556118fc9087906126dc565b6040519081900381209088907f864a2110bb41c315e04bd6122b668384bca4b0d8509e55850db8347e86a95029905f90a350505050505050565b60015f805160206129ef83398151915255565b611951611a09565b61195a81611a52565b61196382611a93565b5050565b5f815f015f8154811061197c5761197c6129a6565b905f5260205f2001549050919050565b5f61199982611af0611af4565b92915050565b5f805160206129cf83398151915280546119c3906001600160a01b03168484611b85565b505050565b5f805160206129cf83398151915280545f9190610981906001600160a01b031684611be4565b6119638282611af0611bf0565b5f6109818383611af0611c21565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661074557604051631afcd79f60e31b815260040160405180910390fd5b611a5a611a09565b611a62611c6e565b611a77611a7260208301836124f6565b611c7e565b610c5e611a8a60408301602084016124f6565b82604001611c8f565b611a9b611a09565b5f805160206129cf8339815191526001600160a01b038216611ad05760405163d92e233d60e01b815260040160405180910390fd5b80546001600160a01b0319166001600160a01b0392909216919091179055565b1190565b5f80611afe845490565b9050805f03611b1157611b116031611d81565b5f611b1c8582611d92565b5490505f611b2d865f198501611d92565b548654909150869080611b4257611b426129ba565b600190038181905f5260205f20015f9055905580611b6b5f885f01611d9290919063ffffffff16565b55611b7c865f1985015f8489611db9565b50949350505050565b6040516001600160a01b038381166024830152604482018390526119c391859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611ead565b5f610981833384611f19565b5f611bf9845490565b84546001810186555f86815260209020018490559050611c1b8482858561207c565b50505050565b5f80611c2b855490565b9050805f03611c3e57611c3e6031611d81565b5f611c498682611d92565b54905084611c57875f611d92565b55611c6586835f8888611db9565b95945050505050565b611c76611a09565b6107456120c4565b611c86611a09565b610c5e816120cc565b611c97611a09565b5f611ca06112e9565b90506001600160a01b038316611cc95760405163d92e233d60e01b815260040160405180910390fd5b611cd28261133f565b80546001600160a01b0319166001600160a01b038416178155611cf86020830183612525565b815465ffff0000ffff60a81b1916600160a81b61ffff929092169190910261ffff60c81b1916178155611d31604083016020840161255a565b60018201805467ffffffffffffffff19166001600160401b039290921691909117905560408201356002820155606082013560038201556080820135600482015560a09091013560059091015550565b634e487b715f52806020526024601cfd5b5f82611db1611dae84611daa845f9081526020902090565b0190565b90565b949350505050565b6001600160ff1b03831015610a7a57600283810260018101910185811015611e62575f611de68884611d92565b5490505f611df48984611d92565b549050611e05828763ffffffff8816565b80611e195750611e1981878763ffffffff16565b15611e5b575f611e3f8585611e3286868b63ffffffff16565b1515918118919091021890565b9050611e4c8a89836120d4565b611e598a8a838a8a611db9565b505b5050610b86565b85821015610b86575f611e758884611d92565b549050611e86818663ffffffff8716565b15611ea357611e968887856120d4565b611ea38888858888611db9565b5050505050505050565b5f8060205f8451602086015f885af180611ecc576040513d5f823e3d81fd5b50505f513d91508115611ee3578060011415611ef0565b6001600160a01b0384163b155b15611c1b57604051635274afe760e01b81526001600160a01b0385166004820152602401610450565b6040516370a0823160e01b81523060048201525f9081906001600160a01b038616906370a0823190602401602060405180830381865afa158015611f5f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f839190612655565b9050611f9a6001600160a01b0386168530866120fc565b6040516370a0823160e01b81523060048201525f906001600160a01b038716906370a0823190602401602060405180830381865afa158015611fde573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120029190612655565b90508181116120685760405162461bcd60e51b815260206004820152602c60248201527f5361666545524332305472616e7366657246726f6d3a2062616c616e6365206e60448201526b1bdd081a5b98dc99585cd95960a21b6064820152608401610450565b61207282826126f7565b9695505050505050565b8215611c1b5760025f198401045f6120948683611d92565b5490506120a5818563ffffffff8616565b156120b1575050611c1b565b6120bc8686846120d4565b50925061207c565b611936611a09565b610c2c611a09565b5f6120df8484611d92565b90505f6120ec8584611d92565b8054835490915590915550505050565b6040516001600160a01b038481166024830152838116604483015260648201839052611c1b9186918216906323b872dd90608401611bb2565b50805461214190612688565b5f825580601f10612150575050565b601f0160209004905f5260205f2090810190610c5e91906121e2565b5080545f8255905f5260205f2090810190610c5e91906121e2565b828054828255905f5260205f209081019282156121da579160200282015b828111156121da57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906121a5565b50610c209291505b5b80821115610c20575f81556001016121e3565b5f60c08284031215612206575f80fd5b50919050565b803563ffffffff8116811461221f575f80fd5b919050565b5f60208284031215612234575f80fd5b6109818261220c565b5f6020828403121561224d575f80fd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b604080519081016001600160401b038111828210171561228a5761228a612254565b60405290565b604051601f8201601f191681016001600160401b03811182821017156122b8576122b8612254565b604052919050565b5f82601f8301126122cf575f80fd5b81356001600160401b038111156122e8576122e8612254565b6122fb601f8201601f1916602001612290565b81815284602083860101111561230f575f80fd5b816020850160208301375f918101602001919091529392505050565b6001600160a01b0381168114610c5e575f80fd5b5f6040828403121561234f575f80fd5b612357612268565b90506123628261220c565b81526020808301356001600160401b038082111561237e575f80fd5b818501915085601f830112612391575f80fd5b8135818111156123a3576123a3612254565b8060051b91506123b4848301612290565b81815291830184019184810190888411156123cd575f80fd5b938501935b838510156123f757843592506123e78361232b565b82825293850193908501906123d2565b808688015250505050505092915050565b5f805f805f60a0868803121561241c575f80fd5b8535945060208601356001600160401b0380821115612439575f80fd5b61244589838a016122c0565b9550604088013591508082111561245a575f80fd5b61246689838a016122c0565b9450606088013591508082111561247b575f80fd5b61248789838a0161233f565b9350608088013591508082111561249c575f80fd5b506124a98882890161233f565b9150509295509295909350565b5f808284036101208112156124c9575f80fd5b83356124d48161232b565b9250610100601f19820112156124e8575f80fd5b506020830190509250929050565b5f60208284031215612506575f80fd5b81356109818161232b565b634e487b7160e01b5f52602160045260245ffd5b5f60208284031215612535575f80fd5b813561ffff81168114610981575f80fd5b6001600160401b0381168114610c5e575f80fd5b5f6020828403121561256a575f80fd5b813561098181612546565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561199957611999612575565b6001600160401b038181168382160280821691908281146125bf576125bf612575565b505092915050565b5f602082840312156125d7575f80fd5b815161098181612546565b5f602082840312156125f2575f80fd5b815160ff81168114610981575f80fd5b5f6001600160401b038084168061262757634e487b7160e01b5f52601260045260245ffd5b92169190910492915050565b61ffff82811682821603908082111561264e5761264e612575565b5092915050565b5f60208284031215612665575f80fd5b5051919050565b5f61ffff82168061267f5761267f612575565b5f190192915050565b600181811c9082168061269c57607f821691505b60208210810361220657634e487b7160e01b5f52602260045260245ffd5b5f5b838110156126d45781810151838201526020016126bc565b50505f910152565b5f82516126ed8184602087016126ba565b9190910192915050565b8181038181111561199957611999612575565b5f61ffff80831681810361272057612720612575565b6001019392505050565b5f81518084526127418160208601602086016126ba565b601f01601f19169290920160200192915050565b5f6040830163ffffffff8351168452602080840151604060208701528281518085526060880191506020830194505f92505b808310156127b05784516001600160a01b03168252938301936001929092019190830190612787565b509695505050505050565b60a081525f6127cd60a083018861272a565b82810360208401526127df818861272a565b905082810360408401526127f38187612755565b905082810360608401526128078186612755565b9150506001600160401b03831660808301529695505050505050565b601f8211156119c357805f5260205f20601f840160051c810160208510156128485750805b601f840160051c820191505b81811015610a7a575f8155600101612854565b81516001600160401b0381111561288057612880612254565b6128948161288e8454612688565b84612823565b602080601f8311600181146128c7575f84156128b05750858301515b5f19600386901b1c1916600185901b178555610a02565b5f85815260208120601f198616915b828110156128f5578886015182559484019460019091019084016128d6565b508582101561291257878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b602081525f610981602083018461272a565b5f80835461294181612688565b60018281168015612959576001811461296e5761299a565b60ff198416875282151583028701945061299a565b875f526020805f205f5b858110156129915781548a820152908401908201612978565b50505082870194505b50929695505050505050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52603160045260245ffdfe04264d6e045c48d92b64fb3ce155b1f7a2673239fb0c9b60c505be1c17a7e7009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a2646970667358221220ec30af2fad6f68665a36968b7daf3f48d4b90f68bd3dcf2c50c07c932ee707ea64736f6c63430008190033",
}

// ERC20TokenSlotAuctionManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20TokenSlotAuctionManagerMetaData.ABI instead.
var ERC20TokenSlotAuctionManagerABI = ERC20TokenSlotAuctionManagerMetaData.ABI

// ERC20TokenSlotAuctionManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20TokenSlotAuctionManagerMetaData.Bin instead.
var ERC20TokenSlotAuctionManagerBin = ERC20TokenSlotAuctionManagerMetaData.Bin

// DeployERC20TokenSlotAuctionManager deploys a new Ethereum contract, binding an instance of ERC20TokenSlotAuctionManager to it.
func DeployERC20TokenSlotAuctionManager(auth *bind.TransactOpts, backend bind.ContractBackend, init uint8) (common.Address, *types.Transaction, *ERC20TokenSlotAuctionManager, error) {
	parsed, err := ERC20TokenSlotAuctionManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20TokenSlotAuctionManagerBin), backend, init)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20TokenSlotAuctionManager{ERC20TokenSlotAuctionManagerCaller: ERC20TokenSlotAuctionManagerCaller{contract: contract}, ERC20TokenSlotAuctionManagerTransactor: ERC20TokenSlotAuctionManagerTransactor{contract: contract}, ERC20TokenSlotAuctionManagerFilterer: ERC20TokenSlotAuctionManagerFilterer{contract: contract}}, nil
}

// ERC20TokenSlotAuctionManager is an auto generated Go binding around an Ethereum contract.
type ERC20TokenSlotAuctionManager struct {
	ERC20TokenSlotAuctionManagerCaller     // Read-only binding to the contract
	ERC20TokenSlotAuctionManagerTransactor // Write-only binding to the contract
	ERC20TokenSlotAuctionManagerFilterer   // Log filterer for contract events
}

// ERC20TokenSlotAuctionManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20TokenSlotAuctionManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20TokenSlotAuctionManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20TokenSlotAuctionManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20TokenSlotAuctionManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20TokenSlotAuctionManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20TokenSlotAuctionManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20TokenSlotAuctionManagerSession struct {
	Contract     *ERC20TokenSlotAuctionManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                 // Call options to use throughout this session
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ERC20TokenSlotAuctionManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20TokenSlotAuctionManagerCallerSession struct {
	Contract *ERC20TokenSlotAuctionManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                       // Call options to use throughout this session
}

// ERC20TokenSlotAuctionManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20TokenSlotAuctionManagerTransactorSession struct {
	Contract     *ERC20TokenSlotAuctionManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                       // Transaction auth options to use throughout this session
}

// ERC20TokenSlotAuctionManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20TokenSlotAuctionManagerRaw struct {
	Contract *ERC20TokenSlotAuctionManager // Generic contract binding to access the raw methods on
}

// ERC20TokenSlotAuctionManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20TokenSlotAuctionManagerCallerRaw struct {
	Contract *ERC20TokenSlotAuctionManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20TokenSlotAuctionManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20TokenSlotAuctionManagerTransactorRaw struct {
	Contract *ERC20TokenSlotAuctionManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20TokenSlotAuctionManager creates a new instance of ERC20TokenSlotAuctionManager, bound to a specific deployed contract.
func NewERC20TokenSlotAuctionManager(address common.Address, backend bind.ContractBackend) (*ERC20TokenSlotAuctionManager, error) {
	contract, err := bindERC20TokenSlotAuctionManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManager{ERC20TokenSlotAuctionManagerCaller: ERC20TokenSlotAuctionManagerCaller{contract: contract}, ERC20TokenSlotAuctionManagerTransactor: ERC20TokenSlotAuctionManagerTransactor{contract: contract}, ERC20TokenSlotAuctionManagerFilterer: ERC20TokenSlotAuctionManagerFilterer{contract: contract}}, nil
}

// NewERC20TokenSlotAuctionManagerCaller creates a new read-only instance of ERC20TokenSlotAuctionManager, bound to a specific deployed contract.
func NewERC20TokenSlotAuctionManagerCaller(address common.Address, caller bind.ContractCaller) (*ERC20TokenSlotAuctionManagerCaller, error) {
	contract, err := bindERC20TokenSlotAuctionManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerCaller{contract: contract}, nil
}

// NewERC20TokenSlotAuctionManagerTransactor creates a new write-only instance of ERC20TokenSlotAuctionManager, bound to a specific deployed contract.
func NewERC20TokenSlotAuctionManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20TokenSlotAuctionManagerTransactor, error) {
	contract, err := bindERC20TokenSlotAuctionManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerTransactor{contract: contract}, nil
}

// NewERC20TokenSlotAuctionManagerFilterer creates a new log filterer instance of ERC20TokenSlotAuctionManager, bound to a specific deployed contract.
func NewERC20TokenSlotAuctionManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20TokenSlotAuctionManagerFilterer, error) {
	contract, err := bindERC20TokenSlotAuctionManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerFilterer{contract: contract}, nil
}

// bindERC20TokenSlotAuctionManager binds a generic wrapper to an already deployed contract.
func bindERC20TokenSlotAuctionManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC20TokenSlotAuctionManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20TokenSlotAuctionManager.Contract.ERC20TokenSlotAuctionManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.ERC20TokenSlotAuctionManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.ERC20TokenSlotAuctionManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20TokenSlotAuctionManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.contract.Transact(opts, method, params...)
}

// ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION is a free data retrieval call binding the contract method 0xab8dd52f.
//
// Solidity: function ERC20_TOKEN_SLOT_AUCTION_MANAGER_STORAGE_LOCATION() view returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "ERC20_TOKEN_SLOT_AUCTION_MANAGER_STORAGE_LOCATION")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION is a free data retrieval call binding the contract method 0xab8dd52f.
//
// Solidity: function ERC20_TOKEN_SLOT_AUCTION_MANAGER_STORAGE_LOCATION() view returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION() ([32]byte, error) {
	return _ERC20TokenSlotAuctionManager.Contract.ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION is a free data retrieval call binding the contract method 0xab8dd52f.
//
// Solidity: function ERC20_TOKEN_SLOT_AUCTION_MANAGER_STORAGE_LOCATION() view returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION() ([32]byte, error) {
	return _ERC20TokenSlotAuctionManager.Contract.ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// SLOTAUCTIONMANAGERSTORAGELOCATION is a free data retrieval call binding the contract method 0xaaab8516.
//
// Solidity: function SLOT_AUCTION_MANAGER_STORAGE_LOCATION() view returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) SLOTAUCTIONMANAGERSTORAGELOCATION(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "SLOT_AUCTION_MANAGER_STORAGE_LOCATION")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SLOTAUCTIONMANAGERSTORAGELOCATION is a free data retrieval call binding the contract method 0xaaab8516.
//
// Solidity: function SLOT_AUCTION_MANAGER_STORAGE_LOCATION() view returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) SLOTAUCTIONMANAGERSTORAGELOCATION() ([32]byte, error) {
	return _ERC20TokenSlotAuctionManager.Contract.SLOTAUCTIONMANAGERSTORAGELOCATION(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// SLOTAUCTIONMANAGERSTORAGELOCATION is a free data retrieval call binding the contract method 0xaaab8516.
//
// Solidity: function SLOT_AUCTION_MANAGER_STORAGE_LOCATION() view returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) SLOTAUCTIONMANAGERSTORAGELOCATION() ([32]byte, error) {
	return _ERC20TokenSlotAuctionManager.Contract.SLOTAUCTIONMANAGERSTORAGELOCATION(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// Erc20 is a free data retrieval call binding the contract method 0x785e9e86.
//
// Solidity: function erc20() view returns(address)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) Erc20(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "erc20")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Erc20 is a free data retrieval call binding the contract method 0x785e9e86.
//
// Solidity: function erc20() view returns(address)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) Erc20() (common.Address, error) {
	return _ERC20TokenSlotAuctionManager.Contract.Erc20(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// Erc20 is a free data retrieval call binding the contract method 0x785e9e86.
//
// Solidity: function erc20() view returns(address)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) Erc20() (common.Address, error) {
	return _ERC20TokenSlotAuctionManager.Contract.Erc20(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetAuctionCooldownDuration is a free data retrieval call binding the contract method 0xf714b6aa.
//
// Solidity: function getAuctionCooldownDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetAuctionCooldownDuration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getAuctionCooldownDuration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAuctionCooldownDuration is a free data retrieval call binding the contract method 0xf714b6aa.
//
// Solidity: function getAuctionCooldownDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetAuctionCooldownDuration() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetAuctionCooldownDuration(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetAuctionCooldownDuration is a free data retrieval call binding the contract method 0xf714b6aa.
//
// Solidity: function getAuctionCooldownDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetAuctionCooldownDuration() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetAuctionCooldownDuration(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetAuctioningValidatorWeight is a free data retrieval call binding the contract method 0x671ef477.
//
// Solidity: function getAuctioningValidatorWeight() view returns(uint64)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetAuctioningValidatorWeight(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getAuctioningValidatorWeight")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetAuctioningValidatorWeight is a free data retrieval call binding the contract method 0x671ef477.
//
// Solidity: function getAuctioningValidatorWeight() view returns(uint64)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetAuctioningValidatorWeight() (uint64, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetAuctioningValidatorWeight(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetAuctioningValidatorWeight is a free data retrieval call binding the contract method 0x671ef477.
//
// Solidity: function getAuctioningValidatorWeight() view returns(uint64)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetAuctioningValidatorWeight() (uint64, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetAuctioningValidatorWeight(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetMinAuctionDuration is a free data retrieval call binding the contract method 0x9940d4c6.
//
// Solidity: function getMinAuctionDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetMinAuctionDuration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getMinAuctionDuration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinAuctionDuration is a free data retrieval call binding the contract method 0x9940d4c6.
//
// Solidity: function getMinAuctionDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetMinAuctionDuration() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetMinAuctionDuration(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetMinAuctionDuration is a free data retrieval call binding the contract method 0x9940d4c6.
//
// Solidity: function getMinAuctionDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetMinAuctionDuration() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetMinAuctionDuration(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetMinValidatorDuration is a free data retrieval call binding the contract method 0x01f6cec8.
//
// Solidity: function getMinValidatorDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetMinValidatorDuration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getMinValidatorDuration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinValidatorDuration is a free data retrieval call binding the contract method 0x01f6cec8.
//
// Solidity: function getMinValidatorDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetMinValidatorDuration() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetMinValidatorDuration(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetMinValidatorDuration is a free data retrieval call binding the contract method 0x01f6cec8.
//
// Solidity: function getMinValidatorDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetMinValidatorDuration() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetMinValidatorDuration(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetMinimumBid is a free data retrieval call binding the contract method 0xc5b63600.
//
// Solidity: function getMinimumBid() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetMinimumBid(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getMinimumBid")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinimumBid is a free data retrieval call binding the contract method 0xc5b63600.
//
// Solidity: function getMinimumBid() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetMinimumBid() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetMinimumBid(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetMinimumBid is a free data retrieval call binding the contract method 0xc5b63600.
//
// Solidity: function getMinimumBid() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetMinimumBid() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetMinimumBid(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetOpenValidatorSlots is a free data retrieval call binding the contract method 0x78eb9c10.
//
// Solidity: function getOpenValidatorSlots() view returns(uint16)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetOpenValidatorSlots(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getOpenValidatorSlots")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// GetOpenValidatorSlots is a free data retrieval call binding the contract method 0x78eb9c10.
//
// Solidity: function getOpenValidatorSlots() view returns(uint16)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetOpenValidatorSlots() (uint16, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetOpenValidatorSlots(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetOpenValidatorSlots is a free data retrieval call binding the contract method 0x78eb9c10.
//
// Solidity: function getOpenValidatorSlots() view returns(uint16)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetOpenValidatorSlots() (uint16, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetOpenValidatorSlots(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetTotalValidatorSlots is a free data retrieval call binding the contract method 0x31b6822e.
//
// Solidity: function getTotalValidatorSlots() view returns(uint16)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetTotalValidatorSlots(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getTotalValidatorSlots")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// GetTotalValidatorSlots is a free data retrieval call binding the contract method 0x31b6822e.
//
// Solidity: function getTotalValidatorSlots() view returns(uint16)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetTotalValidatorSlots() (uint16, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetTotalValidatorSlots(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetTotalValidatorSlots is a free data retrieval call binding the contract method 0x31b6822e.
//
// Solidity: function getTotalValidatorSlots() view returns(uint16)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetTotalValidatorSlots() (uint16, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetTotalValidatorSlots(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// MinBidRequired is a free data retrieval call binding the contract method 0xf1c7b8d2.
//
// Solidity: function minBidRequired() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) MinBidRequired(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "minBidRequired")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinBidRequired is a free data retrieval call binding the contract method 0xf1c7b8d2.
//
// Solidity: function minBidRequired() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) MinBidRequired() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.MinBidRequired(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// MinBidRequired is a free data retrieval call binding the contract method 0xf1c7b8d2.
//
// Solidity: function minBidRequired() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) MinBidRequired() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.MinBidRequired(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) Owner() (common.Address, error) {
	return _ERC20TokenSlotAuctionManager.Contract.Owner(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) Owner() (common.Address, error) {
	return _ERC20TokenSlotAuctionManager.Contract.Owner(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// CompleteValidatorRegistration is a paid mutator transaction binding the contract method 0xa3a65e48.
//
// Solidity: function completeValidatorRegistration(uint32 messageIndex) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) CompleteValidatorRegistration(opts *bind.TransactOpts, messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "completeValidatorRegistration", messageIndex)
}

// CompleteValidatorRegistration is a paid mutator transaction binding the contract method 0xa3a65e48.
//
// Solidity: function completeValidatorRegistration(uint32 messageIndex) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) CompleteValidatorRegistration(messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.CompleteValidatorRegistration(&_ERC20TokenSlotAuctionManager.TransactOpts, messageIndex)
}

// CompleteValidatorRegistration is a paid mutator transaction binding the contract method 0xa3a65e48.
//
// Solidity: function completeValidatorRegistration(uint32 messageIndex) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) CompleteValidatorRegistration(messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.CompleteValidatorRegistration(&_ERC20TokenSlotAuctionManager.TransactOpts, messageIndex)
}

// CompleteValidatorRemoval is a paid mutator transaction binding the contract method 0x9681d940.
//
// Solidity: function completeValidatorRemoval(uint32 messageIndex) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) CompleteValidatorRemoval(opts *bind.TransactOpts, messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "completeValidatorRemoval", messageIndex)
}

// CompleteValidatorRemoval is a paid mutator transaction binding the contract method 0x9681d940.
//
// Solidity: function completeValidatorRemoval(uint32 messageIndex) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) CompleteValidatorRemoval(messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.CompleteValidatorRemoval(&_ERC20TokenSlotAuctionManager.TransactOpts, messageIndex)
}

// CompleteValidatorRemoval is a paid mutator transaction binding the contract method 0x9681d940.
//
// Solidity: function completeValidatorRemoval(uint32 messageIndex) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) CompleteValidatorRemoval(messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.CompleteValidatorRemoval(&_ERC20TokenSlotAuctionManager.TransactOpts, messageIndex)
}

// EndAuction is a paid mutator transaction binding the contract method 0xfe67a54b.
//
// Solidity: function endAuction() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) EndAuction(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "endAuction")
}

// EndAuction is a paid mutator transaction binding the contract method 0xfe67a54b.
//
// Solidity: function endAuction() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) EndAuction() (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.EndAuction(&_ERC20TokenSlotAuctionManager.TransactOpts)
}

// EndAuction is a paid mutator transaction binding the contract method 0xfe67a54b.
//
// Solidity: function endAuction() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) EndAuction() (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.EndAuction(&_ERC20TokenSlotAuctionManager.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xe2366443.
//
// Solidity: function initialize(address token, (address,address,(uint16,uint64,uint256,uint256,uint256,uint256)) settings) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) Initialize(opts *bind.TransactOpts, token common.Address, settings SlotAuctionManagerSettings) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "initialize", token, settings)
}

// Initialize is a paid mutator transaction binding the contract method 0xe2366443.
//
// Solidity: function initialize(address token, (address,address,(uint16,uint64,uint256,uint256,uint256,uint256)) settings) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) Initialize(token common.Address, settings SlotAuctionManagerSettings) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.Initialize(&_ERC20TokenSlotAuctionManager.TransactOpts, token, settings)
}

// Initialize is a paid mutator transaction binding the contract method 0xe2366443.
//
// Solidity: function initialize(address token, (address,address,(uint16,uint64,uint256,uint256,uint256,uint256)) settings) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) Initialize(token common.Address, settings SlotAuctionManagerSettings) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.Initialize(&_ERC20TokenSlotAuctionManager.TransactOpts, token, settings)
}

// InitiateAuction is a paid mutator transaction binding the contract method 0x5561f9df.
//
// Solidity: function initiateAuction() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) InitiateAuction(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "initiateAuction")
}

// InitiateAuction is a paid mutator transaction binding the contract method 0x5561f9df.
//
// Solidity: function initiateAuction() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) InitiateAuction() (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.InitiateAuction(&_ERC20TokenSlotAuctionManager.TransactOpts)
}

// InitiateAuction is a paid mutator transaction binding the contract method 0x5561f9df.
//
// Solidity: function initiateAuction() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) InitiateAuction() (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.InitiateAuction(&_ERC20TokenSlotAuctionManager.TransactOpts)
}

// InitiateValidatorRemoval is a paid mutator transaction binding the contract method 0xb6e6a2ca.
//
// Solidity: function initiateValidatorRemoval(bytes32 validationID) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) InitiateValidatorRemoval(opts *bind.TransactOpts, validationID [32]byte) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "initiateValidatorRemoval", validationID)
}

// InitiateValidatorRemoval is a paid mutator transaction binding the contract method 0xb6e6a2ca.
//
// Solidity: function initiateValidatorRemoval(bytes32 validationID) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) InitiateValidatorRemoval(validationID [32]byte) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.InitiateValidatorRemoval(&_ERC20TokenSlotAuctionManager.TransactOpts, validationID)
}

// InitiateValidatorRemoval is a paid mutator transaction binding the contract method 0xb6e6a2ca.
//
// Solidity: function initiateValidatorRemoval(bytes32 validationID) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) InitiateValidatorRemoval(validationID [32]byte) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.InitiateValidatorRemoval(&_ERC20TokenSlotAuctionManager.TransactOpts, validationID)
}

// PlaceBid is a paid mutator transaction binding the contract method 0xda4312a4.
//
// Solidity: function placeBid(uint256 bid, bytes nodeID, bytes blsPublicKey, (uint32,address[]) remainingBalanceOwner, (uint32,address[]) disableOwner) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) PlaceBid(opts *bind.TransactOpts, bid *big.Int, nodeID []byte, blsPublicKey []byte, remainingBalanceOwner PChainOwner, disableOwner PChainOwner) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "placeBid", bid, nodeID, blsPublicKey, remainingBalanceOwner, disableOwner)
}

// PlaceBid is a paid mutator transaction binding the contract method 0xda4312a4.
//
// Solidity: function placeBid(uint256 bid, bytes nodeID, bytes blsPublicKey, (uint32,address[]) remainingBalanceOwner, (uint32,address[]) disableOwner) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) PlaceBid(bid *big.Int, nodeID []byte, blsPublicKey []byte, remainingBalanceOwner PChainOwner, disableOwner PChainOwner) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.PlaceBid(&_ERC20TokenSlotAuctionManager.TransactOpts, bid, nodeID, blsPublicKey, remainingBalanceOwner, disableOwner)
}

// PlaceBid is a paid mutator transaction binding the contract method 0xda4312a4.
//
// Solidity: function placeBid(uint256 bid, bytes nodeID, bytes blsPublicKey, (uint32,address[]) remainingBalanceOwner, (uint32,address[]) disableOwner) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) PlaceBid(bid *big.Int, nodeID []byte, blsPublicKey []byte, remainingBalanceOwner PChainOwner, disableOwner PChainOwner) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.PlaceBid(&_ERC20TokenSlotAuctionManager.TransactOpts, bid, nodeID, blsPublicKey, remainingBalanceOwner, disableOwner)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.RenounceOwnership(&_ERC20TokenSlotAuctionManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.RenounceOwnership(&_ERC20TokenSlotAuctionManager.TransactOpts)
}

// SetSlotAuctionSettings is a paid mutator transaction binding the contract method 0x267579b6.
//
// Solidity: function setSlotAuctionSettings((uint16,uint64,uint256,uint256,uint256,uint256) auctionSettings) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) SetSlotAuctionSettings(opts *bind.TransactOpts, auctionSettings AuctionSettings) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "setSlotAuctionSettings", auctionSettings)
}

// SetSlotAuctionSettings is a paid mutator transaction binding the contract method 0x267579b6.
//
// Solidity: function setSlotAuctionSettings((uint16,uint64,uint256,uint256,uint256,uint256) auctionSettings) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) SetSlotAuctionSettings(auctionSettings AuctionSettings) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.SetSlotAuctionSettings(&_ERC20TokenSlotAuctionManager.TransactOpts, auctionSettings)
}

// SetSlotAuctionSettings is a paid mutator transaction binding the contract method 0x267579b6.
//
// Solidity: function setSlotAuctionSettings((uint16,uint64,uint256,uint256,uint256,uint256) auctionSettings) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) SetSlotAuctionSettings(auctionSettings AuctionSettings) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.SetSlotAuctionSettings(&_ERC20TokenSlotAuctionManager.TransactOpts, auctionSettings)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.TransferOwnership(&_ERC20TokenSlotAuctionManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.TransferOwnership(&_ERC20TokenSlotAuctionManager.TransactOpts, newOwner)
}

// ERC20TokenSlotAuctionManagerBidEvictedIterator is returned from FilterBidEvicted and is used to iterate over the raw logs and unpacked data for BidEvicted events raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerBidEvictedIterator struct {
	Event *ERC20TokenSlotAuctionManagerBidEvicted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenSlotAuctionManagerBidEvictedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenSlotAuctionManagerBidEvicted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenSlotAuctionManagerBidEvicted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenSlotAuctionManagerBidEvictedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenSlotAuctionManagerBidEvictedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenSlotAuctionManagerBidEvicted represents a BidEvicted event raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerBidEvicted struct {
	Bid    *big.Int
	NodeID common.Hash
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBidEvicted is a free log retrieval operation binding the contract event 0xdbb7ff16cd6e3cc5c7aca1a615bf0d56f746d9f5708e12d52ebe243518b536cc.
//
// Solidity: event BidEvicted(uint256 indexed bid, bytes indexed nodeID)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) FilterBidEvicted(opts *bind.FilterOpts, bid []*big.Int, nodeID [][]byte) (*ERC20TokenSlotAuctionManagerBidEvictedIterator, error) {

	var bidRule []interface{}
	for _, bidItem := range bid {
		bidRule = append(bidRule, bidItem)
	}
	var nodeIDRule []interface{}
	for _, nodeIDItem := range nodeID {
		nodeIDRule = append(nodeIDRule, nodeIDItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.FilterLogs(opts, "BidEvicted", bidRule, nodeIDRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerBidEvictedIterator{contract: _ERC20TokenSlotAuctionManager.contract, event: "BidEvicted", logs: logs, sub: sub}, nil
}

// WatchBidEvicted is a free log subscription operation binding the contract event 0xdbb7ff16cd6e3cc5c7aca1a615bf0d56f746d9f5708e12d52ebe243518b536cc.
//
// Solidity: event BidEvicted(uint256 indexed bid, bytes indexed nodeID)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) WatchBidEvicted(opts *bind.WatchOpts, sink chan<- *ERC20TokenSlotAuctionManagerBidEvicted, bid []*big.Int, nodeID [][]byte) (event.Subscription, error) {

	var bidRule []interface{}
	for _, bidItem := range bid {
		bidRule = append(bidRule, bidItem)
	}
	var nodeIDRule []interface{}
	for _, nodeIDItem := range nodeID {
		nodeIDRule = append(nodeIDRule, nodeIDItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.WatchLogs(opts, "BidEvicted", bidRule, nodeIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenSlotAuctionManagerBidEvicted)
				if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "BidEvicted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBidEvicted is a log parse operation binding the contract event 0xdbb7ff16cd6e3cc5c7aca1a615bf0d56f746d9f5708e12d52ebe243518b536cc.
//
// Solidity: event BidEvicted(uint256 indexed bid, bytes indexed nodeID)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) ParseBidEvicted(log types.Log) (*ERC20TokenSlotAuctionManagerBidEvicted, error) {
	event := new(ERC20TokenSlotAuctionManagerBidEvicted)
	if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "BidEvicted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenSlotAuctionManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerInitializedIterator struct {
	Event *ERC20TokenSlotAuctionManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenSlotAuctionManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenSlotAuctionManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenSlotAuctionManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenSlotAuctionManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenSlotAuctionManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenSlotAuctionManagerInitialized represents a Initialized event raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*ERC20TokenSlotAuctionManagerInitializedIterator, error) {

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerInitializedIterator{contract: _ERC20TokenSlotAuctionManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ERC20TokenSlotAuctionManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenSlotAuctionManagerInitialized)
				if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) ParseInitialized(log types.Log) (*ERC20TokenSlotAuctionManagerInitialized, error) {
	event := new(ERC20TokenSlotAuctionManagerInitialized)
	if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator is returned from FilterInitiatedAuctionValidatorRegistration and is used to iterate over the raw logs and unpacked data for InitiatedAuctionValidatorRegistration events raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator struct {
	Event *ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration represents a InitiatedAuctionValidatorRegistration event raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration struct {
	ValidationID     [32]byte
	OwnerAddress     common.Address
	ValidatorEndTime *big.Int
	Weight           uint64
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterInitiatedAuctionValidatorRegistration is a free log retrieval operation binding the contract event 0x032100a60b84cf31291641706872970585d53fa5be412562041fbf66a99ce285.
//
// Solidity: event InitiatedAuctionValidatorRegistration(bytes32 indexed validationID, address indexed ownerAddress, uint256 validatorEndTime, uint64 weight)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) FilterInitiatedAuctionValidatorRegistration(opts *bind.FilterOpts, validationID [][32]byte, ownerAddress []common.Address) (*ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator, error) {

	var validationIDRule []interface{}
	for _, validationIDItem := range validationID {
		validationIDRule = append(validationIDRule, validationIDItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.FilterLogs(opts, "InitiatedAuctionValidatorRegistration", validationIDRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator{contract: _ERC20TokenSlotAuctionManager.contract, event: "InitiatedAuctionValidatorRegistration", logs: logs, sub: sub}, nil
}

// WatchInitiatedAuctionValidatorRegistration is a free log subscription operation binding the contract event 0x032100a60b84cf31291641706872970585d53fa5be412562041fbf66a99ce285.
//
// Solidity: event InitiatedAuctionValidatorRegistration(bytes32 indexed validationID, address indexed ownerAddress, uint256 validatorEndTime, uint64 weight)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) WatchInitiatedAuctionValidatorRegistration(opts *bind.WatchOpts, sink chan<- *ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration, validationID [][32]byte, ownerAddress []common.Address) (event.Subscription, error) {

	var validationIDRule []interface{}
	for _, validationIDItem := range validationID {
		validationIDRule = append(validationIDRule, validationIDItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.WatchLogs(opts, "InitiatedAuctionValidatorRegistration", validationIDRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration)
				if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "InitiatedAuctionValidatorRegistration", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiatedAuctionValidatorRegistration is a log parse operation binding the contract event 0x032100a60b84cf31291641706872970585d53fa5be412562041fbf66a99ce285.
//
// Solidity: event InitiatedAuctionValidatorRegistration(bytes32 indexed validationID, address indexed ownerAddress, uint256 validatorEndTime, uint64 weight)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) ParseInitiatedAuctionValidatorRegistration(log types.Log) (*ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration, error) {
	event := new(ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration)
	if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "InitiatedAuctionValidatorRegistration", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator is returned from FilterNewValidatorAuction and is used to iterate over the raw logs and unpacked data for NewValidatorAuction events raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator struct {
	Event *ERC20TokenSlotAuctionManagerNewValidatorAuction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenSlotAuctionManagerNewValidatorAuction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenSlotAuctionManagerNewValidatorAuction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenSlotAuctionManagerNewValidatorAuction represents a NewValidatorAuction event raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerNewValidatorAuction struct {
	ValidatorSlots       uint16
	ValidatorWeight      uint64
	MinValidatorDuration *big.Int
	AuctionEndTime       *big.Int
	MinimumBid           *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterNewValidatorAuction is a free log retrieval operation binding the contract event 0x50e40b07b3cd91a269f83830c35b4c090f74ebd0cc06dce4db251ccc23627b54.
//
// Solidity: event NewValidatorAuction(uint16 validatorSlots, uint64 validatorWeight, uint256 minValidatorDuration, uint256 auctionEndTime, uint256 minimumBid)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) FilterNewValidatorAuction(opts *bind.FilterOpts) (*ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator, error) {

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.FilterLogs(opts, "NewValidatorAuction")
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator{contract: _ERC20TokenSlotAuctionManager.contract, event: "NewValidatorAuction", logs: logs, sub: sub}, nil
}

// WatchNewValidatorAuction is a free log subscription operation binding the contract event 0x50e40b07b3cd91a269f83830c35b4c090f74ebd0cc06dce4db251ccc23627b54.
//
// Solidity: event NewValidatorAuction(uint16 validatorSlots, uint64 validatorWeight, uint256 minValidatorDuration, uint256 auctionEndTime, uint256 minimumBid)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) WatchNewValidatorAuction(opts *bind.WatchOpts, sink chan<- *ERC20TokenSlotAuctionManagerNewValidatorAuction) (event.Subscription, error) {

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.WatchLogs(opts, "NewValidatorAuction")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenSlotAuctionManagerNewValidatorAuction)
				if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "NewValidatorAuction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewValidatorAuction is a log parse operation binding the contract event 0x50e40b07b3cd91a269f83830c35b4c090f74ebd0cc06dce4db251ccc23627b54.
//
// Solidity: event NewValidatorAuction(uint16 validatorSlots, uint64 validatorWeight, uint256 minValidatorDuration, uint256 auctionEndTime, uint256 minimumBid)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) ParseNewValidatorAuction(log types.Log) (*ERC20TokenSlotAuctionManagerNewValidatorAuction, error) {
	event := new(ERC20TokenSlotAuctionManagerNewValidatorAuction)
	if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "NewValidatorAuction", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenSlotAuctionManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerOwnershipTransferredIterator struct {
	Event *ERC20TokenSlotAuctionManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenSlotAuctionManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenSlotAuctionManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenSlotAuctionManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenSlotAuctionManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenSlotAuctionManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenSlotAuctionManagerOwnershipTransferred represents a OwnershipTransferred event raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ERC20TokenSlotAuctionManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerOwnershipTransferredIterator{contract: _ERC20TokenSlotAuctionManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ERC20TokenSlotAuctionManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenSlotAuctionManagerOwnershipTransferred)
				if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) ParseOwnershipTransferred(log types.Log) (*ERC20TokenSlotAuctionManagerOwnershipTransferred, error) {
	event := new(ERC20TokenSlotAuctionManagerOwnershipTransferred)
	if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator is returned from FilterSuccessfulBidPlaced and is used to iterate over the raw logs and unpacked data for SuccessfulBidPlaced events raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator struct {
	Event *ERC20TokenSlotAuctionManagerSuccessfulBidPlaced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenSlotAuctionManagerSuccessfulBidPlaced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenSlotAuctionManagerSuccessfulBidPlaced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenSlotAuctionManagerSuccessfulBidPlaced represents a SuccessfulBidPlaced event raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerSuccessfulBidPlaced struct {
	Bid    *big.Int
	NodeID common.Hash
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSuccessfulBidPlaced is a free log retrieval operation binding the contract event 0x864a2110bb41c315e04bd6122b668384bca4b0d8509e55850db8347e86a95029.
//
// Solidity: event SuccessfulBidPlaced(uint256 indexed bid, bytes indexed nodeID)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) FilterSuccessfulBidPlaced(opts *bind.FilterOpts, bid []*big.Int, nodeID [][]byte) (*ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator, error) {

	var bidRule []interface{}
	for _, bidItem := range bid {
		bidRule = append(bidRule, bidItem)
	}
	var nodeIDRule []interface{}
	for _, nodeIDItem := range nodeID {
		nodeIDRule = append(nodeIDRule, nodeIDItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.FilterLogs(opts, "SuccessfulBidPlaced", bidRule, nodeIDRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator{contract: _ERC20TokenSlotAuctionManager.contract, event: "SuccessfulBidPlaced", logs: logs, sub: sub}, nil
}

// WatchSuccessfulBidPlaced is a free log subscription operation binding the contract event 0x864a2110bb41c315e04bd6122b668384bca4b0d8509e55850db8347e86a95029.
//
// Solidity: event SuccessfulBidPlaced(uint256 indexed bid, bytes indexed nodeID)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) WatchSuccessfulBidPlaced(opts *bind.WatchOpts, sink chan<- *ERC20TokenSlotAuctionManagerSuccessfulBidPlaced, bid []*big.Int, nodeID [][]byte) (event.Subscription, error) {

	var bidRule []interface{}
	for _, bidItem := range bid {
		bidRule = append(bidRule, bidItem)
	}
	var nodeIDRule []interface{}
	for _, nodeIDItem := range nodeID {
		nodeIDRule = append(nodeIDRule, nodeIDItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.WatchLogs(opts, "SuccessfulBidPlaced", bidRule, nodeIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenSlotAuctionManagerSuccessfulBidPlaced)
				if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "SuccessfulBidPlaced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSuccessfulBidPlaced is a log parse operation binding the contract event 0x864a2110bb41c315e04bd6122b668384bca4b0d8509e55850db8347e86a95029.
//
// Solidity: event SuccessfulBidPlaced(uint256 indexed bid, bytes indexed nodeID)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) ParseSuccessfulBidPlaced(log types.Log) (*ERC20TokenSlotAuctionManagerSuccessfulBidPlaced, error) {
	event := new(ERC20TokenSlotAuctionManagerSuccessfulBidPlaced)
	if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "SuccessfulBidPlaced", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
