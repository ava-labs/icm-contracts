// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc20tokenslotauctionmanager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ava-labs/libevm"
	"github.com/ava-labs/libevm/common"
	"github.com/ava-labs/libevm/core/types"
	"github.com/ava-labs/libevm/event"
	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/accounts/abi/bind"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AuctionSettings is an auto generated low-level Go binding around an user-defined struct.
type AuctionSettings struct {
	TotalValidatorSlots     uint16
	Weight                  uint64
	MinValidatorDuration    *big.Int
	MinAuctionDuration      *big.Int
	MinimumBid              *big.Int
	AuctionCooldownDuration *big.Int
}

// PChainOwner is an auto generated low-level Go binding around an user-defined struct.
type PChainOwner struct {
	Threshold uint32
	Addresses []common.Address
}

// SlotAuctionManagerSettings is an auto generated low-level Go binding around an user-defined struct.
type SlotAuctionManagerSettings struct {
	Admin           common.Address
	Manager         common.Address
	AuctionSettings AuctionSettings
}

// ERC20TokenSlotAuctionManagerMetaData contains all meta data concerning the ERC20TokenSlotAuctionManager contract.
var ERC20TokenSlotAuctionManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"enumICMInitializable\",\"name\":\"init\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionEndTime\",\"type\":\"uint256\"}],\"name\":\"AuctionEndTimeNotReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionCooldownEndtime\",\"type\":\"uint256\"}],\"name\":\"AuctionInCooldown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionInProgress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotInProgress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minumumBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBid\",\"type\":\"uint256\"}],\"name\":\"BidSmallerThanMinimum\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"DuplicateBidInContention\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"}],\"name\":\"DuplicateNodeIDInContention\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"smallestAcceptableBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBid\",\"type\":\"uint256\"}],\"name\":\"InsufficientBidToWinAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumValidationDuration\",\"type\":\"uint256\"}],\"name\":\"InvalidMinValidatorDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoOpenValidatorSlots\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"}],\"name\":\"NodeIsValidator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"}],\"name\":\"VaidatorRegistrationTimePeriodOver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"validationTimeLimit\",\"type\":\"uint256\"}],\"name\":\"ValidatorTimeLimitNotPassed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"validatorWeight\",\"type\":\"uint64\"}],\"name\":\"ValidatorWeightTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroMinBid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroWeight\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"}],\"name\":\"AuctionVoucherCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"}],\"name\":\"BidEvicted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"validationID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validatorEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"}],\"name\":\"InitiatedAuctionValidatorRegistration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"validatorSlots\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"validatorWeight\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minValidatorDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumBid\",\"type\":\"uint256\"}],\"name\":\"NewValidatorAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"}],\"name\":\"SuccessfulBidPlaced\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC20_TOKEN_SLOT_AUCTION_MANAGER_STORAGE_LOCATION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLOT_AUCTION_MANAGER_STORAGE_LOCATION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"messageIndex\",\"type\":\"uint32\"}],\"name\":\"completeValidatorRegistration\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"messageIndex\",\"type\":\"uint32\"}],\"name\":\"completeValidatorRemoval\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"contractIERC20Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionCooldownDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctioningValidatorWeight\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinAuctionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinValidatorDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpenValidatorSlots\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValidatorSlots\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20Mintable\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contractIValidatorManager\",\"name\":\"manager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"totalValidatorSlots\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"minValidatorDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAuctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionCooldownDuration\",\"type\":\"uint256\"}],\"internalType\":\"structAuctionSettings\",\"name\":\"auctionSettings\",\"type\":\"tuple\"}],\"internalType\":\"structSlotAuctionManagerSettings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiateAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"}],\"name\":\"initiateValidatorRegistration\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"validationID\",\"type\":\"bytes32\"}],\"name\":\"initiateValidatorRemoval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"nodeID\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blsPublicKey\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"threshold\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"internalType\":\"structPChainOwner\",\"name\":\"remainingBalanceOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"threshold\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"internalType\":\"structPChainOwner\",\"name\":\"disableOwner\",\"type\":\"tuple\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"totalValidatorSlots\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"minValidatorDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAuctionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionCooldownDuration\",\"type\":\"uint256\"}],\"internalType\":\"structAuctionSettings\",\"name\":\"auctionSettings\",\"type\":\"tuple\"}],\"name\":\"setSlotAuctionSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f80fd5b5060405161345338038061345383398101604081905261002e91610107565b60018160018111156100425761004261012c565b0361004f5761004f610055565b50610140565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156100a55760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146101045780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b5f60208284031215610117575f80fd5b815160028110610125575f80fd5b9392505050565b634e487b7160e01b5f52602160045260245ffd5b6133068061014d5f395ff3fe608060405234801561000f575f80fd5b5060043610610148575f3560e01c8063a3a65e48116100bf578063e236644311610079578063e23664431461028e578063f1c7b8d2146102a1578063f2fde38b146102a9578063f714b6aa146102bc578063fc94c5ce146102c4578063fe67a54b146102d7575f80fd5b8063a3a65e4814610212578063aaab851614610225578063ab8dd52f1461024c578063b6e6a2ca14610260578063c5b6360014610273578063da4312a41461027b575f80fd5b8063715018a611610110578063715018a6146101bf578063785e9e86146101c757806378eb9c10146101e75780638da5cb5b146101ef5780639681d940146101f75780639940d4c61461020a575f80fd5b806301f6cec81461014c578063267579b61461016757806331b6822e1461017c5780635561f9df14610197578063671ef4771461019f575b5f80fd5b6101546102df565b6040519081526020015b60405180910390f35b61017a6101753660046129a6565b6102f3565b005b6101846103d3565b60405161ffff909116815260200161015e565b61017a6103ef565b6101a76106ee565b6040516001600160401b03909116815260200161015e565b61017a61070b565b6101cf61071e565b6040516001600160a01b03909116815260200161015e565b61018461073f565b6101cf610772565b6101546102053660046129d4565b61079a565b6101546108c9565b6101546102203660046129d4565b6108dd565b6101547f6494e1e6ac2d5f44a06b929c1549cec0c499347f244a852c37aef6b6707be60081565b6101545f8051602061329183398151915281565b61017a61026e3660046129ed565b61095f565b610154610a12565b61017a610289366004612bda565b610a26565b61017a61029c366004612c88565b610a58565b610154610b66565b61017a6102b7366004612cc8565b610bfb565b610154610c38565b6101546102d2366004612ce3565b610c4c565b61017a610ff5565b5f806102e961179a565b6002015492915050565b5f6102fc61179a565b90505f8154600160a01b900460ff16600281111561031c5761031c612d14565b1461033a57604051639bbb1f3b60e01b815260040160405180910390fd5b6103426117be565b5f61034b61179a565b9050610356836117f0565b6103636020840184612d28565b815461ffff91909116600160a81b0261ffff60a81b19909116178155606083013560038201556040830180356002830155608084013560048301556103ab9060208501612d5d565b600191909101805467ffffffffffffffff19166001600160401b039092169190911790555050565b5f806103dd61179a565b54600160a81b900461ffff1692915050565b5f6103f861179a565b90505f8154600160a01b900460ff16600281111561041857610418612d14565b1461043657604051639bbb1f3b60e01b815260040160405180910390fd5b5f61043f61179a565b90508060060154421015610477578060060154604051638fc300c160e01b815260040161046e91815260200190565b60405180910390fd5b5f61048061179a565b805460ff60a01b1916600160a01b17815560038101549091506104a39042612d8c565b600782015560048101546008820155805461ffff600160a81b82048116600160c81b90920416036104e7576040516327388c6f60e21b815260040160405180910390fd5b5f80825f015f9054906101000a90046001600160a01b03166001600160a01b0316634d6935366040518163ffffffff1660e01b815260040160c060405180830381865afa15801561053a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061055e9190612d9f565b600186015491945092505f915061057f906001600160401b03166064612e3b565b604083015161058f600286612e7a565b60ff1661059c9190612e3b565b6105a69190612e9b565b9050806001600160401b03165f036105e2576001840154604051632bfe056160e01b81526001600160401b03909116600482015260240161046e565b83546106029061ffff600160c81b8204811691600160a81b900416612ec0565b61ffff16816001600160401b031611156106575783546106369061ffff600160c81b8204811691600160a81b900416612ec0565b845461ffff91909116600160b81b0261ffff60b81b19909116178455610670565b835461ffff60b81b1916600160b81b61ffff8316021784555b8354600185015460028601546007870154600488015460408051600160b81b90960461ffff1686526001600160401b03909416602086015292840191909152606083015260808201527f50e40b07b3cd91a269f83830c35b4c090f74ebd0cc06dce4db251ccc23627b549060a00160405180910390a1505050505050565b5f806106f861179a565b600101546001600160401b031692915050565b6107136117be565b61071c5f61184c565b565b5f805f805160206132918339815191525b546001600160a01b031692915050565b5f8061074961179a565b805490915061076c9061ffff600160c81b8204811691600160a81b900416612ec0565b91505090565b5f807f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930061072f565b5f806107a461179a565b805460405163025a076560e61b815263ffffffff861660048201529192505f916001600160a01b0390911690639681d940906024016020604051808303815f875af11580156107f5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108199190612ee2565b5f818152600a840160205260409020600101549091501561086a578154829060199061084f90600160c81b900461ffff16612ef9565b91906101000a81548161ffff021916908361ffff1602179055505b5f818152600a83016020526040812080546001600160a01b0319168155600181018290559061089c60028301826128e5565b6108a9600383015f6128e5565b505f6004820155600501805467ffffffffffffffff191690559392505050565b5f806108d361179a565b6003015492915050565b5f806108e761179a565b8054604051631474cbc960e31b815263ffffffff861660048201529192506001600160a01b03169063a3a65e48906024016020604051808303815f875af1158015610934573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109589190612ee2565b9392505050565b5f61096861179a565b5f838152600a820160205260409020600101549091504211156109e1578054604051635b73516560e11b8152600481018490526001600160a01b039091169063b6e6a2ca906024015f604051808303815f87803b1580156109c7575f80fd5b505af11580156109d9573d5f803e3d5ffd5b505050505050565b5f828152600a8201602052604090819020600101549051631a936b7b60e11b8152600481019190915260240161046e565b5f80610a1c61179a565b6004015492915050565b610a2e6118bc565b610a3b85858585856118f3565b610a5160015f805160206132b183398151915255565b5050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03165f81158015610a9c5750825b90505f826001600160401b03166001148015610ab75750303b155b905081158015610ac5575080155b15610ae35760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610b0d57845460ff60401b1916600160401b1785555b610b178787611dfa565b8315610b5d57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b5f80610b7061179a565b905060018154600160a01b900460ff166002811115610b9157610b91612d14565b14610bae576040516232f00d60e71b815260040160405180910390fd5b5f610bb761179a565b8054600d820154919250600160a81b900461ffff161115610bdc576004015491505090565b610be881600d01611e18565b610bf3906001612d8c565b9250505b5090565b610c036117be565b6001600160a01b038116610c2c57604051631e4fbdf760e01b81525f600482015260240161046e565b610c358161184c565b50565b5f80610c4261179a565b6005015492915050565b5f80610c5661179a565b90505f81600c0184604051610c6b9190612f37565b9081526040805191829003602090810183206101008401835280546001600160a01b03168452600181015491840191909152600281015491830191909152600381018054606084019190610cbe90612f52565b80601f0160208091040260200160405190810160405280929190818152602001828054610cea90612f52565b8015610d355780601f10610d0c57610100808354040283529160200191610d35565b820191905f5260205f20905b815481529060010190602001808311610d1857829003601f168201915b50505050508152602001600482018054610d4e90612f52565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7a90612f52565b8015610dc55780601f10610d9c57610100808354040283529160200191610dc5565b820191905f5260205f20905b815481529060010190602001808311610da857829003601f168201915b505050918352505060058201546001600160401b031660208083019190915260408051808201825260068501805463ffffffff1682526007860180548451818702810187018652818152949096019592949193858301939092830182828015610e5557602002820191905f5260205f20905b81546001600160a01b03168152600190910190602001808311610e37575b50505091909252505050815260408051808201825260088401805463ffffffff168252600985018054845160208281028201810190965281815295850195939492938584019390929190830182828015610ed657602002820191905f5260205f20905b81546001600160a01b03168152600190910190602001808311610eb8575b50505050508152505081525050905081600c0184604051610ef79190612f37565b90815260405190819003602001902080546001600160a01b03191681555f6001820181905560028201819055610f3060038301826128e5565b610f3d600483015f6128e5565b60058201805467ffffffffffffffff1916905560068201805463ffffffff191681555f610f6d600785018261291c565b505060088201805463ffffffff191681555f610f8c600985018261291c565b505050508060400151421115610fc15760408082015160608301519151635a79cffd60e01b815261046e924291600401612faf565b5f610fec825f01518360600151846020015185608001518660c001518760e001518860a00151611e3d565b95945050505050565b610ffd6118bc565b5f61100661179a565b905060018154600160a01b900460ff16600281111561102757611027612d14565b14611044576040516232f00d60e71b815260040160405180910390fd5b5f61104d61179a565b9050806007015442101561107c578060070154604051638230260760e01b815260040161046e91815260200190565b8054600160a11b60ff60a01b198216178255604080516326b49a9b60e11b815290515f92839283926001600160a01b0390921691634d6935369160048082019260c0929091908290030181865afa1580156110d9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110fd9190612d9f565b92509250505f8160200151905081606001516001600160401b03165f03611125575060408101515b60018501546001600160401b031661113e600d87015490565b6111489190612fcd565b82606001516001600160401b03166111609190612d8c565b61116b906064612fcd565b6111788260ff8616612e3b565b6001600160401b0316101561118c57600193505b600585015461119b9042612d8c565b60068601555b5f6111ad86600d015490565b111561176a575f6111c086600d0161201b565b5f818152600b880160209081526040808320815160c08101835281546001600160a01b031681526001820154938101939093526002810180549596509394929390929184019161120f90612f52565b80601f016020809104026020016040519081016040528092919081815260200182805461123b90612f52565b80156112865780601f1061125d57610100808354040283529160200191611286565b820191905f5260205f20905b81548152906001019060200180831161126957829003601f168201915b5050505050815260200160038201805461129f90612f52565b80601f01602080910402602001604051908101604052809291908181526020018280546112cb90612f52565b80156113165780601f106112ed57610100808354040283529160200191611316565b820191905f5260205f20905b8154815290600101906020018083116112f957829003601f168201915b505050918352505060408051808201825260048401805463ffffffff16825260058501805484516020828102820181019096528181529585019593949293858401939092919083018282801561139357602002820191905f5260205f20905b81546001600160a01b03168152600190910190602001808311611375575b50505091909252505050815260408051808201825260068401805463ffffffff16825260078501805484516020828102820181019096528181529585019593949293858401939092919083018282801561141457602002820191905f5260205f20905b81546001600160a01b031681526001909101906020018083116113f6575b505050919092525050509052505f838152600b89016020526040812080546001600160a01b03191681556001810182905591925061145560028301826128e5565b611462600383015f6128e5565b60048201805463ffffffff191681555f61147f600585018261291c565b505060068201805463ffffffff191681555f61149e600785018261291c565b505050508660090181604001516040516114b89190612f37565b908152604051908190036020019020805460ff19169055600787015460028801545f916114e491612d8c565b90508760080154836114f69190612fe4565b15611516578151600889015461151691906115119086612fe4565b61202e565b861561172757604051806101000160405280835f01516001600160a01b03168152602001828152602001896006015481526020018360400151815260200183606001518152602001896001015f9054906101000a90046001600160401b03166001600160401b03168152602001836080015181526020018360a0015181525088600c0183604001516040516115ab9190612f37565b9081526040805160209281900383019020835181546001600160a01b0319166001600160a01b039091161781559183015160018301558201516002820155606082015160038201906115fd908261303b565b5060808201516004820190611612908261303b565b5060a082015160058201805467ffffffffffffffff19166001600160401b0390921691909117905560c0820151805160068301805463ffffffff191663ffffffff90921691909117815560208083015180516116749260078701920190612937565b50505060e0820151805160088301805463ffffffff191663ffffffff90921691909117815560208083015180516116b19260098701920190612937565b505050905050815f01516001600160a01b031682604001516040516116d69190612f37565b6040805191829003822060018c01548584526001600160401b03166020840152917f97b61485fb961aa6a72565e3821899f9f17255c4ae6d8842b2c109dd3720df47910160405180910390a361175e565b815160408301516060840151608085015160a086015160018d015461175c9594938793909290916001600160401b0316611e3d565b505b505060088601556111a1565b50505f60078401555050805464ffff0000ff60a01b191690555061071c60015f805160206132b183398151915255565b7f6494e1e6ac2d5f44a06b929c1549cec0c499347f244a852c37aef6b6707be60090565b336117c7610772565b6001600160a01b03161461071c5760405163118cdaa760e01b815233600482015260240161046e565b6118006040820160208301612d5d565b6001600160401b03165f03611828576040516319a2a9bd60e01b815260040160405180910390fd5b80608001355f03610c35576040516309a501d360e21b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f805160206132b18339815191528054600119016118ed57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b5f6118fc61179a565b905060018154600160a01b900460ff16600281111561191d5761191d612d14565b1461193a576040516232f00d60e71b815260040160405180910390fd5b5f61194361179a565b805460405163d47a948b60e01b81529192506001600160a01b03169063d47a948b906119739089906004016130f6565b602060405180830381865afa15801561198e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119b29190612ee2565b156119d2578560405163f3c815f760e01b815260040161046e91906130f6565b80600901866040516119e49190612f37565b9081526040519081900360200190205460ff1615611a17578560405163da1fb87960e01b815260040161046e91906130f6565b5f878152600b820160205260409020546001600160a01b031615611a5157604051630517e2e760e21b81526004810188905260240161046e565b8681600401541115611a83576004818101546040516301a0013b60e61b8152918201526024810188905260440161046e565b805461ffff600160b81b90910416611a9c600d83015490565b1015611abe57611aab87612057565b50611ab981600d018861207d565b611c64565b86611acb82600d01611e18565b1015611c2957611ada87612057565b505f611ae982600d018961208a565b905081600b015f8281526020019081526020015f20600201604051611b0e9190613108565b6040519081900381209082907fdbb7ff16cd6e3cc5c7aca1a615bf0d56f746d9f5708e12d52ebe243518b536cc905f90a35f818152600b83016020526040902054611b62906001600160a01b03168261202e565b8160090182600b015f8381526020019081526020015f20600201604051611b899190613108565b9081526040805160209281900383019020805460ff191690555f838152600b8501909252812080546001600160a01b03191681556001810182905590611bd260028301826128e5565b611bdf600383015f6128e5565b60048201805463ffffffff191681555f611bfc600585018261291c565b505060068201805463ffffffff191681555f611c1b600785018261291c565b505050506008820155611c64565b611c3581600d01611e18565b611c40906001612d8c565b604051631a79674760e11b815260048101919091526024810188905260440161046e565b6040805160c08101825233815260208082018a81528284018a8152606084018a90526080840189905260a084018890525f8c8152600b870190935293909120825181546001600160a01b0319166001600160a01b039091161781559051600182015591519091906002820190611cda908261303b565b5060608201516003820190611cef908261303b565b506080820151805160048301805463ffffffff191663ffffffff9092169190911781556020808301518051611d2a9260058701920190612937565b50505060a0820151805160068301805463ffffffff191663ffffffff9092169190911781556020808301518051611d679260078701920190612937565b50505090505060018160090187604051611d819190612f37565b908152604051908190036020018120805492151560ff1990931692909217909155611dad908790612f37565b6040519081900381209088907f864a2110bb41c315e04bd6122b668384bca4b0d8509e55850db8347e86a95029905f90a350505050505050565b60015f805160206132b183398151915255565b611e02612098565b611e0b816120e1565b611e1482612122565b5050565b5f815f015f81548110611e2d57611e2d61317a565b905f5260205f2001549050919050565b5f80611e4761179a565b80549091508190601990611e6590600160c81b900461ffff1661318e565b825461ffff9182166101009390930a92830291909202199091161790558054604051634e5bb12760e11b81525f916001600160a01b031690639cb7624e90611eb9908c908b908b908b908b90600401613214565b6020604051808303815f875af1158015611ed5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ef99190612ee2565b6040805160c0810182526001600160a01b038d8116825260208083018d81528385018f8152606085018e9052608085018790526001600160401b038b1660a08601525f878152600a8a0190935294909120835181546001600160a01b03191693169290921782555160018201559151929350916002820190611f7b908261303b565b5060608201516003820190611f90908261303b565b506080820151600482015560a0909101516005909101805467ffffffffffffffff19166001600160401b039283161790556001830154604080518b81529190921660208201526001600160a01b038c169183917f032100a60b84cf31291641706872970585d53fa5be412562041fbf66a99ce285910160405180910390a39998505050505050505050565b5f6120288261217f612183565b92915050565b5f805160206132918339815191528054612052906001600160a01b03168484612214565b505050565b5f8051602061329183398151915280545f9190610958906001600160a01b0316846122a1565b611e14828261217f6122ad565b5f610958838361217f6122d8565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661071c57604051631afcd79f60e31b815260040160405180910390fd5b6120e9612098565b6120f161231c565b6121066121016020830183612cc8565b61232c565b610c356121196040830160208401612cc8565b8260400161233d565b61212a612098565b5f805160206132918339815191526001600160a01b03821661215f5760405163d92e233d60e01b815260040160405180910390fd5b80546001600160a01b0319166001600160a01b0392909216919091179055565b1190565b5f8061218d845490565b9050805f036121a0576121a0603161242f565b5f6121ab8582612440565b5490505f6121bc865f198501612440565b5486549091508690806121d1576121d161327c565b600190038181905f5260205f20015f90559055806121fa5f885f0161244090919063ffffffff16565b5561220b865f1985015f8489612467565b50949350505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301525f919085169063dd62ed3e90604401602060405180830381865afa158015612261573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122859190612ee2565b905061229b84846122968585612d8c565b61255b565b50505050565b5f610958833384612618565b5f6122b6845490565b84546001810186555f8681526020902001849055905061229b8482858561277b565b5f806122e2855490565b9050805f036122f5576122f5603161242f565b5f6123008682612440565b5490508461230e875f612440565b55610fec86835f8888612467565b612324612098565b61071c6127c3565b612334612098565b610c35816127cb565b612345612098565b5f61234e61179a565b90506001600160a01b0383166123775760405163d92e233d60e01b815260040160405180910390fd5b612380826117f0565b80546001600160a01b0319166001600160a01b0384161781556123a66020830183612d28565b815465ffff0000ffff60a81b1916600160a81b61ffff929092169190910261ffff60c81b19161781556123df6040830160208401612d5d565b60018201805467ffffffffffffffff19166001600160401b039290921691909117905560408201356002820155606082013560038201556080820135600482015560a09091013560059091015550565b634e487b715f52806020526024601cfd5b5f8261245f61245c84612458845f9081526020902090565b0190565b90565b949350505050565b6001600160ff1b03831015610a5157600283810260018101910185811015612510575f6124948884612440565b5490505f6124a28984612440565b5490506124b3828763ffffffff8816565b806124c757506124c781878763ffffffff16565b15612509575f6124ed85856124e086868b63ffffffff16565b1515918118919091021890565b90506124fa8a89836127d3565b6125078a8a838a8a612467565b505b5050610b5d565b85821015610b5d575f6125238884612440565b549050612534818663ffffffff8716565b15612551576125448887856127d3565b6125518888858888612467565b5050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526125ac84826127fb565b61229b576040516001600160a01b0384811660248301525f604483015261260e91869182169063095ea7b3906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050612840565b61229b8482612840565b6040516370a0823160e01b81523060048201525f9081906001600160a01b038616906370a0823190602401602060405180830381865afa15801561265e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126829190612ee2565b90506126996001600160a01b0386168530866128ac565b6040516370a0823160e01b81523060048201525f906001600160a01b038716906370a0823190602401602060405180830381865afa1580156126dd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906127019190612ee2565b90508181116127675760405162461bcd60e51b815260206004820152602c60248201527f5361666545524332305472616e7366657246726f6d3a2062616c616e6365206e60448201526b1bdd081a5b98dc99585cd95960a21b606482015260840161046e565b6127718282612fe4565b9695505050505050565b821561229b5760025f198401045f6127938683612440565b5490506127a4818563ffffffff8616565b156127b057505061229b565b6127bb8686846127d3565b50925061277b565b611de7612098565b610c03612098565b5f6127de8484612440565b90505f6127eb8584612440565b8054835490915590915550505050565b5f805f8060205f8651602088015f8a5af192503d91505f5190508280156127715750811561282c5780600114612771565b50505050506001600160a01b03163b151590565b5f8060205f8451602086015f885af18061285f576040513d5f823e3d81fd5b50505f513d91508115612876578060011415612883565b6001600160a01b0384163b155b1561229b57604051635274afe760e01b81526001600160a01b038516600482015260240161046e565b6040516001600160a01b03848116602483015283811660448301526064820183905261229b9186918216906323b872dd906084016125dc565b5080546128f190612f52565b5f825580601f10612900575050565b601f0160209004905f5260205f2090810190610c359190612992565b5080545f8255905f5260205f2090810190610c359190612992565b828054828255905f5260205f2090810192821561298a579160200282015b8281111561298a57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612955565b50610bf79291505b5b80821115610bf7575f8155600101612993565b5f60c082840312156129b6575f80fd5b50919050565b803563ffffffff811681146129cf575f80fd5b919050565b5f602082840312156129e4575f80fd5b610958826129bc565b5f602082840312156129fd575f80fd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b604080519081016001600160401b0381118282101715612a3a57612a3a612a04565b60405290565b604051608081016001600160401b0381118282101715612a3a57612a3a612a04565b604051601f8201601f191681016001600160401b0381118282101715612a8a57612a8a612a04565b604052919050565b5f82601f830112612aa1575f80fd5b81356001600160401b03811115612aba57612aba612a04565b612acd601f8201601f1916602001612a62565b818152846020838601011115612ae1575f80fd5b816020850160208301375f918101602001919091529392505050565b6001600160a01b0381168114610c35575f80fd5b5f60408284031215612b21575f80fd5b612b29612a18565b9050612b34826129bc565b81526020808301356001600160401b0380821115612b50575f80fd5b818501915085601f830112612b63575f80fd5b813581811115612b7557612b75612a04565b8060051b9150612b86848301612a62565b8181529183018401918481019088841115612b9f575f80fd5b938501935b83851015612bc95784359250612bb983612afd565b8282529385019390850190612ba4565b808688015250505050505092915050565b5f805f805f60a08688031215612bee575f80fd5b8535945060208601356001600160401b0380821115612c0b575f80fd5b612c1789838a01612a92565b95506040880135915080821115612c2c575f80fd5b612c3889838a01612a92565b94506060880135915080821115612c4d575f80fd5b612c5989838a01612b11565b93506080880135915080821115612c6e575f80fd5b50612c7b88828901612b11565b9150509295509295909350565b5f80828403610120811215612c9b575f80fd5b8335612ca681612afd565b9250610100601f1982011215612cba575f80fd5b506020830190509250929050565b5f60208284031215612cd8575f80fd5b813561095881612afd565b5f60208284031215612cf3575f80fd5b81356001600160401b03811115612d08575f80fd5b61245f84828501612a92565b634e487b7160e01b5f52602160045260245ffd5b5f60208284031215612d38575f80fd5b813561ffff81168114610958575f80fd5b6001600160401b0381168114610c35575f80fd5b5f60208284031215612d6d575f80fd5b813561095881612d49565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561202857612028612d78565b5f805f83850360c0811215612db2575f80fd5b8451612dbd81612d49565b602086015190945060ff81168114612dd3575f80fd5b92506080603f1982011215612de6575f80fd5b50612def612a40565b604085015181526060850151612e0481612d49565b60208201526080850151612e1781612d49565b604082015260a0850151612e2a81612d49565b606082015292959194509192509050565b6001600160401b03818116838216028082169190828114612e5e57612e5e612d78565b505092915050565b634e487b7160e01b5f52601260045260245ffd5b5f60ff831680612e8c57612e8c612e66565b8060ff84160491505092915050565b5f6001600160401b0380841680612eb457612eb4612e66565b92169190910492915050565b61ffff828116828216039080821115612edb57612edb612d78565b5092915050565b5f60208284031215612ef2575f80fd5b5051919050565b5f61ffff821680612f0c57612f0c612d78565b5f190192915050565b5f5b83811015612f2f578181015183820152602001612f17565b50505f910152565b5f8251612f48818460208701612f15565b9190910192915050565b600181811c90821680612f6657607f821691505b6020821081036129b657634e487b7160e01b5f52602260045260245ffd5b5f8151808452612f9b816020860160208601612f15565b601f01601f19169290920160200192915050565b838152826020820152606060408201525f610fec6060830184612f84565b808202811582820484141761202857612028612d78565b8181038181111561202857612028612d78565b601f82111561205257805f5260205f20601f840160051c8101602085101561301c5750805b601f840160051c820191505b81811015610a51575f8155600101613028565b81516001600160401b0381111561305457613054612a04565b613068816130628454612f52565b84612ff7565b602080601f83116001811461309b575f84156130845750858301515b5f19600386901b1c1916600185901b1785556109d9565b5f85815260208120601f198616915b828110156130c9578886015182559484019460019091019084016130aa565b50858210156130e657878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b602081525f6109586020830184612f84565b5f80835461311581612f52565b6001828116801561312d57600181146131425761316e565b60ff198416875282151583028701945061316e565b875f526020805f205f5b858110156131655781548a82015290840190820161314c565b50505082870194505b50929695505050505050565b634e487b7160e01b5f52603260045260245ffd5b5f61ffff8083168181036131a4576131a4612d78565b6001019392505050565b5f6040830163ffffffff8351168452602080840151604060208701528281518085526060880191506020830194505f92505b808310156132095784516001600160a01b031682529383019360019290920191908301906131e0565b509695505050505050565b60a081525f61322660a0830188612f84565b82810360208401526132388188612f84565b9050828103604084015261324c81876131ae565b9050828103606084015261326081866131ae565b9150506001600160401b03831660808301529695505050505050565b634e487b7160e01b5f52603160045260245ffdfe04264d6e045c48d92b64fb3ce155b1f7a2673239fb0c9b60c505be1c17a7e7009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00a26469706673582212207617f710a215f904574b6345dcc26cc3a1e51e68a1abf9f9089c77d990f74ae164736f6c63430008190033",
}

// ERC20TokenSlotAuctionManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20TokenSlotAuctionManagerMetaData.ABI instead.
var ERC20TokenSlotAuctionManagerABI = ERC20TokenSlotAuctionManagerMetaData.ABI

// ERC20TokenSlotAuctionManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20TokenSlotAuctionManagerMetaData.Bin instead.
var ERC20TokenSlotAuctionManagerBin = ERC20TokenSlotAuctionManagerMetaData.Bin

// DeployERC20TokenSlotAuctionManager deploys a new Ethereum contract, binding an instance of ERC20TokenSlotAuctionManager to it.
func DeployERC20TokenSlotAuctionManager(auth *bind.TransactOpts, backend bind.ContractBackend, init uint8) (common.Address, *types.Transaction, *ERC20TokenSlotAuctionManager, error) {
	parsed, err := ERC20TokenSlotAuctionManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20TokenSlotAuctionManagerBin), backend, init)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20TokenSlotAuctionManager{ERC20TokenSlotAuctionManagerCaller: ERC20TokenSlotAuctionManagerCaller{contract: contract}, ERC20TokenSlotAuctionManagerTransactor: ERC20TokenSlotAuctionManagerTransactor{contract: contract}, ERC20TokenSlotAuctionManagerFilterer: ERC20TokenSlotAuctionManagerFilterer{contract: contract}}, nil
}

// ERC20TokenSlotAuctionManager is an auto generated Go binding around an Ethereum contract.
type ERC20TokenSlotAuctionManager struct {
	ERC20TokenSlotAuctionManagerCaller     // Read-only binding to the contract
	ERC20TokenSlotAuctionManagerTransactor // Write-only binding to the contract
	ERC20TokenSlotAuctionManagerFilterer   // Log filterer for contract events
}

// ERC20TokenSlotAuctionManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20TokenSlotAuctionManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20TokenSlotAuctionManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20TokenSlotAuctionManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20TokenSlotAuctionManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20TokenSlotAuctionManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20TokenSlotAuctionManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20TokenSlotAuctionManagerSession struct {
	Contract     *ERC20TokenSlotAuctionManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                 // Call options to use throughout this session
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ERC20TokenSlotAuctionManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20TokenSlotAuctionManagerCallerSession struct {
	Contract *ERC20TokenSlotAuctionManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                       // Call options to use throughout this session
}

// ERC20TokenSlotAuctionManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20TokenSlotAuctionManagerTransactorSession struct {
	Contract     *ERC20TokenSlotAuctionManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                       // Transaction auth options to use throughout this session
}

// ERC20TokenSlotAuctionManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20TokenSlotAuctionManagerRaw struct {
	Contract *ERC20TokenSlotAuctionManager // Generic contract binding to access the raw methods on
}

// ERC20TokenSlotAuctionManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20TokenSlotAuctionManagerCallerRaw struct {
	Contract *ERC20TokenSlotAuctionManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20TokenSlotAuctionManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20TokenSlotAuctionManagerTransactorRaw struct {
	Contract *ERC20TokenSlotAuctionManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20TokenSlotAuctionManager creates a new instance of ERC20TokenSlotAuctionManager, bound to a specific deployed contract.
func NewERC20TokenSlotAuctionManager(address common.Address, backend bind.ContractBackend) (*ERC20TokenSlotAuctionManager, error) {
	contract, err := bindERC20TokenSlotAuctionManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManager{ERC20TokenSlotAuctionManagerCaller: ERC20TokenSlotAuctionManagerCaller{contract: contract}, ERC20TokenSlotAuctionManagerTransactor: ERC20TokenSlotAuctionManagerTransactor{contract: contract}, ERC20TokenSlotAuctionManagerFilterer: ERC20TokenSlotAuctionManagerFilterer{contract: contract}}, nil
}

// NewERC20TokenSlotAuctionManagerCaller creates a new read-only instance of ERC20TokenSlotAuctionManager, bound to a specific deployed contract.
func NewERC20TokenSlotAuctionManagerCaller(address common.Address, caller bind.ContractCaller) (*ERC20TokenSlotAuctionManagerCaller, error) {
	contract, err := bindERC20TokenSlotAuctionManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerCaller{contract: contract}, nil
}

// NewERC20TokenSlotAuctionManagerTransactor creates a new write-only instance of ERC20TokenSlotAuctionManager, bound to a specific deployed contract.
func NewERC20TokenSlotAuctionManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20TokenSlotAuctionManagerTransactor, error) {
	contract, err := bindERC20TokenSlotAuctionManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerTransactor{contract: contract}, nil
}

// NewERC20TokenSlotAuctionManagerFilterer creates a new log filterer instance of ERC20TokenSlotAuctionManager, bound to a specific deployed contract.
func NewERC20TokenSlotAuctionManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20TokenSlotAuctionManagerFilterer, error) {
	contract, err := bindERC20TokenSlotAuctionManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerFilterer{contract: contract}, nil
}

// bindERC20TokenSlotAuctionManager binds a generic wrapper to an already deployed contract.
func bindERC20TokenSlotAuctionManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC20TokenSlotAuctionManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20TokenSlotAuctionManager.Contract.ERC20TokenSlotAuctionManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.ERC20TokenSlotAuctionManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.ERC20TokenSlotAuctionManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20TokenSlotAuctionManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.contract.Transact(opts, method, params...)
}

// ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION is a free data retrieval call binding the contract method 0xab8dd52f.
//
// Solidity: function ERC20_TOKEN_SLOT_AUCTION_MANAGER_STORAGE_LOCATION() view returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "ERC20_TOKEN_SLOT_AUCTION_MANAGER_STORAGE_LOCATION")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION is a free data retrieval call binding the contract method 0xab8dd52f.
//
// Solidity: function ERC20_TOKEN_SLOT_AUCTION_MANAGER_STORAGE_LOCATION() view returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION() ([32]byte, error) {
	return _ERC20TokenSlotAuctionManager.Contract.ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION is a free data retrieval call binding the contract method 0xab8dd52f.
//
// Solidity: function ERC20_TOKEN_SLOT_AUCTION_MANAGER_STORAGE_LOCATION() view returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION() ([32]byte, error) {
	return _ERC20TokenSlotAuctionManager.Contract.ERC20TOKENSLOTAUCTIONMANAGERSTORAGELOCATION(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// SLOTAUCTIONMANAGERSTORAGELOCATION is a free data retrieval call binding the contract method 0xaaab8516.
//
// Solidity: function SLOT_AUCTION_MANAGER_STORAGE_LOCATION() view returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) SLOTAUCTIONMANAGERSTORAGELOCATION(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "SLOT_AUCTION_MANAGER_STORAGE_LOCATION")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SLOTAUCTIONMANAGERSTORAGELOCATION is a free data retrieval call binding the contract method 0xaaab8516.
//
// Solidity: function SLOT_AUCTION_MANAGER_STORAGE_LOCATION() view returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) SLOTAUCTIONMANAGERSTORAGELOCATION() ([32]byte, error) {
	return _ERC20TokenSlotAuctionManager.Contract.SLOTAUCTIONMANAGERSTORAGELOCATION(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// SLOTAUCTIONMANAGERSTORAGELOCATION is a free data retrieval call binding the contract method 0xaaab8516.
//
// Solidity: function SLOT_AUCTION_MANAGER_STORAGE_LOCATION() view returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) SLOTAUCTIONMANAGERSTORAGELOCATION() ([32]byte, error) {
	return _ERC20TokenSlotAuctionManager.Contract.SLOTAUCTIONMANAGERSTORAGELOCATION(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// Erc20 is a free data retrieval call binding the contract method 0x785e9e86.
//
// Solidity: function erc20() view returns(address)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) Erc20(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "erc20")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Erc20 is a free data retrieval call binding the contract method 0x785e9e86.
//
// Solidity: function erc20() view returns(address)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) Erc20() (common.Address, error) {
	return _ERC20TokenSlotAuctionManager.Contract.Erc20(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// Erc20 is a free data retrieval call binding the contract method 0x785e9e86.
//
// Solidity: function erc20() view returns(address)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) Erc20() (common.Address, error) {
	return _ERC20TokenSlotAuctionManager.Contract.Erc20(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetAuctionCooldownDuration is a free data retrieval call binding the contract method 0xf714b6aa.
//
// Solidity: function getAuctionCooldownDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetAuctionCooldownDuration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getAuctionCooldownDuration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAuctionCooldownDuration is a free data retrieval call binding the contract method 0xf714b6aa.
//
// Solidity: function getAuctionCooldownDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetAuctionCooldownDuration() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetAuctionCooldownDuration(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetAuctionCooldownDuration is a free data retrieval call binding the contract method 0xf714b6aa.
//
// Solidity: function getAuctionCooldownDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetAuctionCooldownDuration() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetAuctionCooldownDuration(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetAuctioningValidatorWeight is a free data retrieval call binding the contract method 0x671ef477.
//
// Solidity: function getAuctioningValidatorWeight() view returns(uint64)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetAuctioningValidatorWeight(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getAuctioningValidatorWeight")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetAuctioningValidatorWeight is a free data retrieval call binding the contract method 0x671ef477.
//
// Solidity: function getAuctioningValidatorWeight() view returns(uint64)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetAuctioningValidatorWeight() (uint64, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetAuctioningValidatorWeight(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetAuctioningValidatorWeight is a free data retrieval call binding the contract method 0x671ef477.
//
// Solidity: function getAuctioningValidatorWeight() view returns(uint64)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetAuctioningValidatorWeight() (uint64, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetAuctioningValidatorWeight(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetMinAuctionDuration is a free data retrieval call binding the contract method 0x9940d4c6.
//
// Solidity: function getMinAuctionDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetMinAuctionDuration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getMinAuctionDuration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinAuctionDuration is a free data retrieval call binding the contract method 0x9940d4c6.
//
// Solidity: function getMinAuctionDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetMinAuctionDuration() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetMinAuctionDuration(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetMinAuctionDuration is a free data retrieval call binding the contract method 0x9940d4c6.
//
// Solidity: function getMinAuctionDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetMinAuctionDuration() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetMinAuctionDuration(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetMinValidatorDuration is a free data retrieval call binding the contract method 0x01f6cec8.
//
// Solidity: function getMinValidatorDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetMinValidatorDuration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getMinValidatorDuration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinValidatorDuration is a free data retrieval call binding the contract method 0x01f6cec8.
//
// Solidity: function getMinValidatorDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetMinValidatorDuration() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetMinValidatorDuration(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetMinValidatorDuration is a free data retrieval call binding the contract method 0x01f6cec8.
//
// Solidity: function getMinValidatorDuration() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetMinValidatorDuration() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetMinValidatorDuration(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetMinimumBid is a free data retrieval call binding the contract method 0xc5b63600.
//
// Solidity: function getMinimumBid() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetMinimumBid(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getMinimumBid")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinimumBid is a free data retrieval call binding the contract method 0xc5b63600.
//
// Solidity: function getMinimumBid() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetMinimumBid() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetMinimumBid(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetMinimumBid is a free data retrieval call binding the contract method 0xc5b63600.
//
// Solidity: function getMinimumBid() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetMinimumBid() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetMinimumBid(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetOpenValidatorSlots is a free data retrieval call binding the contract method 0x78eb9c10.
//
// Solidity: function getOpenValidatorSlots() view returns(uint16)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetOpenValidatorSlots(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getOpenValidatorSlots")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// GetOpenValidatorSlots is a free data retrieval call binding the contract method 0x78eb9c10.
//
// Solidity: function getOpenValidatorSlots() view returns(uint16)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetOpenValidatorSlots() (uint16, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetOpenValidatorSlots(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetOpenValidatorSlots is a free data retrieval call binding the contract method 0x78eb9c10.
//
// Solidity: function getOpenValidatorSlots() view returns(uint16)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetOpenValidatorSlots() (uint16, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetOpenValidatorSlots(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetTotalValidatorSlots is a free data retrieval call binding the contract method 0x31b6822e.
//
// Solidity: function getTotalValidatorSlots() view returns(uint16)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) GetTotalValidatorSlots(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "getTotalValidatorSlots")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// GetTotalValidatorSlots is a free data retrieval call binding the contract method 0x31b6822e.
//
// Solidity: function getTotalValidatorSlots() view returns(uint16)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) GetTotalValidatorSlots() (uint16, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetTotalValidatorSlots(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// GetTotalValidatorSlots is a free data retrieval call binding the contract method 0x31b6822e.
//
// Solidity: function getTotalValidatorSlots() view returns(uint16)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) GetTotalValidatorSlots() (uint16, error) {
	return _ERC20TokenSlotAuctionManager.Contract.GetTotalValidatorSlots(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// MinBidRequired is a free data retrieval call binding the contract method 0xf1c7b8d2.
//
// Solidity: function minBidRequired() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) MinBidRequired(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "minBidRequired")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinBidRequired is a free data retrieval call binding the contract method 0xf1c7b8d2.
//
// Solidity: function minBidRequired() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) MinBidRequired() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.MinBidRequired(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// MinBidRequired is a free data retrieval call binding the contract method 0xf1c7b8d2.
//
// Solidity: function minBidRequired() view returns(uint256)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) MinBidRequired() (*big.Int, error) {
	return _ERC20TokenSlotAuctionManager.Contract.MinBidRequired(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20TokenSlotAuctionManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) Owner() (common.Address, error) {
	return _ERC20TokenSlotAuctionManager.Contract.Owner(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerCallerSession) Owner() (common.Address, error) {
	return _ERC20TokenSlotAuctionManager.Contract.Owner(&_ERC20TokenSlotAuctionManager.CallOpts)
}

// CompleteValidatorRegistration is a paid mutator transaction binding the contract method 0xa3a65e48.
//
// Solidity: function completeValidatorRegistration(uint32 messageIndex) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) CompleteValidatorRegistration(opts *bind.TransactOpts, messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "completeValidatorRegistration", messageIndex)
}

// CompleteValidatorRegistration is a paid mutator transaction binding the contract method 0xa3a65e48.
//
// Solidity: function completeValidatorRegistration(uint32 messageIndex) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) CompleteValidatorRegistration(messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.CompleteValidatorRegistration(&_ERC20TokenSlotAuctionManager.TransactOpts, messageIndex)
}

// CompleteValidatorRegistration is a paid mutator transaction binding the contract method 0xa3a65e48.
//
// Solidity: function completeValidatorRegistration(uint32 messageIndex) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) CompleteValidatorRegistration(messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.CompleteValidatorRegistration(&_ERC20TokenSlotAuctionManager.TransactOpts, messageIndex)
}

// CompleteValidatorRemoval is a paid mutator transaction binding the contract method 0x9681d940.
//
// Solidity: function completeValidatorRemoval(uint32 messageIndex) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) CompleteValidatorRemoval(opts *bind.TransactOpts, messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "completeValidatorRemoval", messageIndex)
}

// CompleteValidatorRemoval is a paid mutator transaction binding the contract method 0x9681d940.
//
// Solidity: function completeValidatorRemoval(uint32 messageIndex) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) CompleteValidatorRemoval(messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.CompleteValidatorRemoval(&_ERC20TokenSlotAuctionManager.TransactOpts, messageIndex)
}

// CompleteValidatorRemoval is a paid mutator transaction binding the contract method 0x9681d940.
//
// Solidity: function completeValidatorRemoval(uint32 messageIndex) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) CompleteValidatorRemoval(messageIndex uint32) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.CompleteValidatorRemoval(&_ERC20TokenSlotAuctionManager.TransactOpts, messageIndex)
}

// EndAuction is a paid mutator transaction binding the contract method 0xfe67a54b.
//
// Solidity: function endAuction() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) EndAuction(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "endAuction")
}

// EndAuction is a paid mutator transaction binding the contract method 0xfe67a54b.
//
// Solidity: function endAuction() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) EndAuction() (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.EndAuction(&_ERC20TokenSlotAuctionManager.TransactOpts)
}

// EndAuction is a paid mutator transaction binding the contract method 0xfe67a54b.
//
// Solidity: function endAuction() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) EndAuction() (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.EndAuction(&_ERC20TokenSlotAuctionManager.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xe2366443.
//
// Solidity: function initialize(address token, (address,address,(uint16,uint64,uint256,uint256,uint256,uint256)) settings) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) Initialize(opts *bind.TransactOpts, token common.Address, settings SlotAuctionManagerSettings) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "initialize", token, settings)
}

// Initialize is a paid mutator transaction binding the contract method 0xe2366443.
//
// Solidity: function initialize(address token, (address,address,(uint16,uint64,uint256,uint256,uint256,uint256)) settings) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) Initialize(token common.Address, settings SlotAuctionManagerSettings) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.Initialize(&_ERC20TokenSlotAuctionManager.TransactOpts, token, settings)
}

// Initialize is a paid mutator transaction binding the contract method 0xe2366443.
//
// Solidity: function initialize(address token, (address,address,(uint16,uint64,uint256,uint256,uint256,uint256)) settings) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) Initialize(token common.Address, settings SlotAuctionManagerSettings) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.Initialize(&_ERC20TokenSlotAuctionManager.TransactOpts, token, settings)
}

// InitiateAuction is a paid mutator transaction binding the contract method 0x5561f9df.
//
// Solidity: function initiateAuction() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) InitiateAuction(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "initiateAuction")
}

// InitiateAuction is a paid mutator transaction binding the contract method 0x5561f9df.
//
// Solidity: function initiateAuction() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) InitiateAuction() (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.InitiateAuction(&_ERC20TokenSlotAuctionManager.TransactOpts)
}

// InitiateAuction is a paid mutator transaction binding the contract method 0x5561f9df.
//
// Solidity: function initiateAuction() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) InitiateAuction() (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.InitiateAuction(&_ERC20TokenSlotAuctionManager.TransactOpts)
}

// InitiateValidatorRegistration is a paid mutator transaction binding the contract method 0xfc94c5ce.
//
// Solidity: function initiateValidatorRegistration(bytes nodeID) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) InitiateValidatorRegistration(opts *bind.TransactOpts, nodeID []byte) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "initiateValidatorRegistration", nodeID)
}

// InitiateValidatorRegistration is a paid mutator transaction binding the contract method 0xfc94c5ce.
//
// Solidity: function initiateValidatorRegistration(bytes nodeID) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) InitiateValidatorRegistration(nodeID []byte) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.InitiateValidatorRegistration(&_ERC20TokenSlotAuctionManager.TransactOpts, nodeID)
}

// InitiateValidatorRegistration is a paid mutator transaction binding the contract method 0xfc94c5ce.
//
// Solidity: function initiateValidatorRegistration(bytes nodeID) returns(bytes32)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) InitiateValidatorRegistration(nodeID []byte) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.InitiateValidatorRegistration(&_ERC20TokenSlotAuctionManager.TransactOpts, nodeID)
}

// InitiateValidatorRemoval is a paid mutator transaction binding the contract method 0xb6e6a2ca.
//
// Solidity: function initiateValidatorRemoval(bytes32 validationID) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) InitiateValidatorRemoval(opts *bind.TransactOpts, validationID [32]byte) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "initiateValidatorRemoval", validationID)
}

// InitiateValidatorRemoval is a paid mutator transaction binding the contract method 0xb6e6a2ca.
//
// Solidity: function initiateValidatorRemoval(bytes32 validationID) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) InitiateValidatorRemoval(validationID [32]byte) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.InitiateValidatorRemoval(&_ERC20TokenSlotAuctionManager.TransactOpts, validationID)
}

// InitiateValidatorRemoval is a paid mutator transaction binding the contract method 0xb6e6a2ca.
//
// Solidity: function initiateValidatorRemoval(bytes32 validationID) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) InitiateValidatorRemoval(validationID [32]byte) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.InitiateValidatorRemoval(&_ERC20TokenSlotAuctionManager.TransactOpts, validationID)
}

// PlaceBid is a paid mutator transaction binding the contract method 0xda4312a4.
//
// Solidity: function placeBid(uint256 bid, bytes nodeID, bytes blsPublicKey, (uint32,address[]) remainingBalanceOwner, (uint32,address[]) disableOwner) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) PlaceBid(opts *bind.TransactOpts, bid *big.Int, nodeID []byte, blsPublicKey []byte, remainingBalanceOwner PChainOwner, disableOwner PChainOwner) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "placeBid", bid, nodeID, blsPublicKey, remainingBalanceOwner, disableOwner)
}

// PlaceBid is a paid mutator transaction binding the contract method 0xda4312a4.
//
// Solidity: function placeBid(uint256 bid, bytes nodeID, bytes blsPublicKey, (uint32,address[]) remainingBalanceOwner, (uint32,address[]) disableOwner) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) PlaceBid(bid *big.Int, nodeID []byte, blsPublicKey []byte, remainingBalanceOwner PChainOwner, disableOwner PChainOwner) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.PlaceBid(&_ERC20TokenSlotAuctionManager.TransactOpts, bid, nodeID, blsPublicKey, remainingBalanceOwner, disableOwner)
}

// PlaceBid is a paid mutator transaction binding the contract method 0xda4312a4.
//
// Solidity: function placeBid(uint256 bid, bytes nodeID, bytes blsPublicKey, (uint32,address[]) remainingBalanceOwner, (uint32,address[]) disableOwner) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) PlaceBid(bid *big.Int, nodeID []byte, blsPublicKey []byte, remainingBalanceOwner PChainOwner, disableOwner PChainOwner) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.PlaceBid(&_ERC20TokenSlotAuctionManager.TransactOpts, bid, nodeID, blsPublicKey, remainingBalanceOwner, disableOwner)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.RenounceOwnership(&_ERC20TokenSlotAuctionManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.RenounceOwnership(&_ERC20TokenSlotAuctionManager.TransactOpts)
}

// SetSlotAuctionSettings is a paid mutator transaction binding the contract method 0x267579b6.
//
// Solidity: function setSlotAuctionSettings((uint16,uint64,uint256,uint256,uint256,uint256) auctionSettings) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) SetSlotAuctionSettings(opts *bind.TransactOpts, auctionSettings AuctionSettings) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "setSlotAuctionSettings", auctionSettings)
}

// SetSlotAuctionSettings is a paid mutator transaction binding the contract method 0x267579b6.
//
// Solidity: function setSlotAuctionSettings((uint16,uint64,uint256,uint256,uint256,uint256) auctionSettings) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) SetSlotAuctionSettings(auctionSettings AuctionSettings) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.SetSlotAuctionSettings(&_ERC20TokenSlotAuctionManager.TransactOpts, auctionSettings)
}

// SetSlotAuctionSettings is a paid mutator transaction binding the contract method 0x267579b6.
//
// Solidity: function setSlotAuctionSettings((uint16,uint64,uint256,uint256,uint256,uint256) auctionSettings) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) SetSlotAuctionSettings(auctionSettings AuctionSettings) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.SetSlotAuctionSettings(&_ERC20TokenSlotAuctionManager.TransactOpts, auctionSettings)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.TransferOwnership(&_ERC20TokenSlotAuctionManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC20TokenSlotAuctionManager.Contract.TransferOwnership(&_ERC20TokenSlotAuctionManager.TransactOpts, newOwner)
}

// ERC20TokenSlotAuctionManagerAuctionVoucherCreatedIterator is returned from FilterAuctionVoucherCreated and is used to iterate over the raw logs and unpacked data for AuctionVoucherCreated events raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerAuctionVoucherCreatedIterator struct {
	Event *ERC20TokenSlotAuctionManagerAuctionVoucherCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenSlotAuctionManagerAuctionVoucherCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenSlotAuctionManagerAuctionVoucherCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenSlotAuctionManagerAuctionVoucherCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenSlotAuctionManagerAuctionVoucherCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenSlotAuctionManagerAuctionVoucherCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenSlotAuctionManagerAuctionVoucherCreated represents a AuctionVoucherCreated event raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerAuctionVoucherCreated struct {
	NodeID           common.Hash
	OwnerAddress     common.Address
	ValidatorEndTime *big.Int
	Weight           uint64
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterAuctionVoucherCreated is a free log retrieval operation binding the contract event 0x97b61485fb961aa6a72565e3821899f9f17255c4ae6d8842b2c109dd3720df47.
//
// Solidity: event AuctionVoucherCreated(bytes indexed nodeID, address indexed ownerAddress, uint256 validatorEndTime, uint64 weight)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) FilterAuctionVoucherCreated(opts *bind.FilterOpts, nodeID [][]byte, ownerAddress []common.Address) (*ERC20TokenSlotAuctionManagerAuctionVoucherCreatedIterator, error) {

	var nodeIDRule []interface{}
	for _, nodeIDItem := range nodeID {
		nodeIDRule = append(nodeIDRule, nodeIDItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.FilterLogs(opts, "AuctionVoucherCreated", nodeIDRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerAuctionVoucherCreatedIterator{contract: _ERC20TokenSlotAuctionManager.contract, event: "AuctionVoucherCreated", logs: logs, sub: sub}, nil
}

// WatchAuctionVoucherCreated is a free log subscription operation binding the contract event 0x97b61485fb961aa6a72565e3821899f9f17255c4ae6d8842b2c109dd3720df47.
//
// Solidity: event AuctionVoucherCreated(bytes indexed nodeID, address indexed ownerAddress, uint256 validatorEndTime, uint64 weight)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) WatchAuctionVoucherCreated(opts *bind.WatchOpts, sink chan<- *ERC20TokenSlotAuctionManagerAuctionVoucherCreated, nodeID [][]byte, ownerAddress []common.Address) (event.Subscription, error) {

	var nodeIDRule []interface{}
	for _, nodeIDItem := range nodeID {
		nodeIDRule = append(nodeIDRule, nodeIDItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.WatchLogs(opts, "AuctionVoucherCreated", nodeIDRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenSlotAuctionManagerAuctionVoucherCreated)
				if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "AuctionVoucherCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuctionVoucherCreated is a log parse operation binding the contract event 0x97b61485fb961aa6a72565e3821899f9f17255c4ae6d8842b2c109dd3720df47.
//
// Solidity: event AuctionVoucherCreated(bytes indexed nodeID, address indexed ownerAddress, uint256 validatorEndTime, uint64 weight)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) ParseAuctionVoucherCreated(log types.Log) (*ERC20TokenSlotAuctionManagerAuctionVoucherCreated, error) {
	event := new(ERC20TokenSlotAuctionManagerAuctionVoucherCreated)
	if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "AuctionVoucherCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenSlotAuctionManagerBidEvictedIterator is returned from FilterBidEvicted and is used to iterate over the raw logs and unpacked data for BidEvicted events raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerBidEvictedIterator struct {
	Event *ERC20TokenSlotAuctionManagerBidEvicted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenSlotAuctionManagerBidEvictedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenSlotAuctionManagerBidEvicted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenSlotAuctionManagerBidEvicted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenSlotAuctionManagerBidEvictedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenSlotAuctionManagerBidEvictedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenSlotAuctionManagerBidEvicted represents a BidEvicted event raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerBidEvicted struct {
	Bid    *big.Int
	NodeID common.Hash
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBidEvicted is a free log retrieval operation binding the contract event 0xdbb7ff16cd6e3cc5c7aca1a615bf0d56f746d9f5708e12d52ebe243518b536cc.
//
// Solidity: event BidEvicted(uint256 indexed bid, bytes indexed nodeID)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) FilterBidEvicted(opts *bind.FilterOpts, bid []*big.Int, nodeID [][]byte) (*ERC20TokenSlotAuctionManagerBidEvictedIterator, error) {

	var bidRule []interface{}
	for _, bidItem := range bid {
		bidRule = append(bidRule, bidItem)
	}
	var nodeIDRule []interface{}
	for _, nodeIDItem := range nodeID {
		nodeIDRule = append(nodeIDRule, nodeIDItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.FilterLogs(opts, "BidEvicted", bidRule, nodeIDRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerBidEvictedIterator{contract: _ERC20TokenSlotAuctionManager.contract, event: "BidEvicted", logs: logs, sub: sub}, nil
}

// WatchBidEvicted is a free log subscription operation binding the contract event 0xdbb7ff16cd6e3cc5c7aca1a615bf0d56f746d9f5708e12d52ebe243518b536cc.
//
// Solidity: event BidEvicted(uint256 indexed bid, bytes indexed nodeID)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) WatchBidEvicted(opts *bind.WatchOpts, sink chan<- *ERC20TokenSlotAuctionManagerBidEvicted, bid []*big.Int, nodeID [][]byte) (event.Subscription, error) {

	var bidRule []interface{}
	for _, bidItem := range bid {
		bidRule = append(bidRule, bidItem)
	}
	var nodeIDRule []interface{}
	for _, nodeIDItem := range nodeID {
		nodeIDRule = append(nodeIDRule, nodeIDItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.WatchLogs(opts, "BidEvicted", bidRule, nodeIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenSlotAuctionManagerBidEvicted)
				if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "BidEvicted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBidEvicted is a log parse operation binding the contract event 0xdbb7ff16cd6e3cc5c7aca1a615bf0d56f746d9f5708e12d52ebe243518b536cc.
//
// Solidity: event BidEvicted(uint256 indexed bid, bytes indexed nodeID)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) ParseBidEvicted(log types.Log) (*ERC20TokenSlotAuctionManagerBidEvicted, error) {
	event := new(ERC20TokenSlotAuctionManagerBidEvicted)
	if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "BidEvicted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenSlotAuctionManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerInitializedIterator struct {
	Event *ERC20TokenSlotAuctionManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenSlotAuctionManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenSlotAuctionManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenSlotAuctionManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenSlotAuctionManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenSlotAuctionManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenSlotAuctionManagerInitialized represents a Initialized event raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*ERC20TokenSlotAuctionManagerInitializedIterator, error) {

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerInitializedIterator{contract: _ERC20TokenSlotAuctionManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ERC20TokenSlotAuctionManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenSlotAuctionManagerInitialized)
				if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) ParseInitialized(log types.Log) (*ERC20TokenSlotAuctionManagerInitialized, error) {
	event := new(ERC20TokenSlotAuctionManagerInitialized)
	if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator is returned from FilterInitiatedAuctionValidatorRegistration and is used to iterate over the raw logs and unpacked data for InitiatedAuctionValidatorRegistration events raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator struct {
	Event *ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration represents a InitiatedAuctionValidatorRegistration event raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration struct {
	ValidationID     [32]byte
	OwnerAddress     common.Address
	ValidatorEndTime *big.Int
	Weight           uint64
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterInitiatedAuctionValidatorRegistration is a free log retrieval operation binding the contract event 0x032100a60b84cf31291641706872970585d53fa5be412562041fbf66a99ce285.
//
// Solidity: event InitiatedAuctionValidatorRegistration(bytes32 indexed validationID, address indexed ownerAddress, uint256 validatorEndTime, uint64 weight)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) FilterInitiatedAuctionValidatorRegistration(opts *bind.FilterOpts, validationID [][32]byte, ownerAddress []common.Address) (*ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator, error) {

	var validationIDRule []interface{}
	for _, validationIDItem := range validationID {
		validationIDRule = append(validationIDRule, validationIDItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.FilterLogs(opts, "InitiatedAuctionValidatorRegistration", validationIDRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistrationIterator{contract: _ERC20TokenSlotAuctionManager.contract, event: "InitiatedAuctionValidatorRegistration", logs: logs, sub: sub}, nil
}

// WatchInitiatedAuctionValidatorRegistration is a free log subscription operation binding the contract event 0x032100a60b84cf31291641706872970585d53fa5be412562041fbf66a99ce285.
//
// Solidity: event InitiatedAuctionValidatorRegistration(bytes32 indexed validationID, address indexed ownerAddress, uint256 validatorEndTime, uint64 weight)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) WatchInitiatedAuctionValidatorRegistration(opts *bind.WatchOpts, sink chan<- *ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration, validationID [][32]byte, ownerAddress []common.Address) (event.Subscription, error) {

	var validationIDRule []interface{}
	for _, validationIDItem := range validationID {
		validationIDRule = append(validationIDRule, validationIDItem)
	}
	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.WatchLogs(opts, "InitiatedAuctionValidatorRegistration", validationIDRule, ownerAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration)
				if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "InitiatedAuctionValidatorRegistration", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitiatedAuctionValidatorRegistration is a log parse operation binding the contract event 0x032100a60b84cf31291641706872970585d53fa5be412562041fbf66a99ce285.
//
// Solidity: event InitiatedAuctionValidatorRegistration(bytes32 indexed validationID, address indexed ownerAddress, uint256 validatorEndTime, uint64 weight)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) ParseInitiatedAuctionValidatorRegistration(log types.Log) (*ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration, error) {
	event := new(ERC20TokenSlotAuctionManagerInitiatedAuctionValidatorRegistration)
	if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "InitiatedAuctionValidatorRegistration", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator is returned from FilterNewValidatorAuction and is used to iterate over the raw logs and unpacked data for NewValidatorAuction events raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator struct {
	Event *ERC20TokenSlotAuctionManagerNewValidatorAuction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenSlotAuctionManagerNewValidatorAuction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenSlotAuctionManagerNewValidatorAuction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenSlotAuctionManagerNewValidatorAuction represents a NewValidatorAuction event raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerNewValidatorAuction struct {
	ValidatorSlots       uint16
	ValidatorWeight      uint64
	MinValidatorDuration *big.Int
	AuctionEndTime       *big.Int
	MinimumBid           *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterNewValidatorAuction is a free log retrieval operation binding the contract event 0x50e40b07b3cd91a269f83830c35b4c090f74ebd0cc06dce4db251ccc23627b54.
//
// Solidity: event NewValidatorAuction(uint16 validatorSlots, uint64 validatorWeight, uint256 minValidatorDuration, uint256 auctionEndTime, uint256 minimumBid)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) FilterNewValidatorAuction(opts *bind.FilterOpts) (*ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator, error) {

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.FilterLogs(opts, "NewValidatorAuction")
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerNewValidatorAuctionIterator{contract: _ERC20TokenSlotAuctionManager.contract, event: "NewValidatorAuction", logs: logs, sub: sub}, nil
}

// WatchNewValidatorAuction is a free log subscription operation binding the contract event 0x50e40b07b3cd91a269f83830c35b4c090f74ebd0cc06dce4db251ccc23627b54.
//
// Solidity: event NewValidatorAuction(uint16 validatorSlots, uint64 validatorWeight, uint256 minValidatorDuration, uint256 auctionEndTime, uint256 minimumBid)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) WatchNewValidatorAuction(opts *bind.WatchOpts, sink chan<- *ERC20TokenSlotAuctionManagerNewValidatorAuction) (event.Subscription, error) {

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.WatchLogs(opts, "NewValidatorAuction")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenSlotAuctionManagerNewValidatorAuction)
				if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "NewValidatorAuction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewValidatorAuction is a log parse operation binding the contract event 0x50e40b07b3cd91a269f83830c35b4c090f74ebd0cc06dce4db251ccc23627b54.
//
// Solidity: event NewValidatorAuction(uint16 validatorSlots, uint64 validatorWeight, uint256 minValidatorDuration, uint256 auctionEndTime, uint256 minimumBid)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) ParseNewValidatorAuction(log types.Log) (*ERC20TokenSlotAuctionManagerNewValidatorAuction, error) {
	event := new(ERC20TokenSlotAuctionManagerNewValidatorAuction)
	if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "NewValidatorAuction", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenSlotAuctionManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerOwnershipTransferredIterator struct {
	Event *ERC20TokenSlotAuctionManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenSlotAuctionManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenSlotAuctionManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenSlotAuctionManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenSlotAuctionManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenSlotAuctionManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenSlotAuctionManagerOwnershipTransferred represents a OwnershipTransferred event raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ERC20TokenSlotAuctionManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerOwnershipTransferredIterator{contract: _ERC20TokenSlotAuctionManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ERC20TokenSlotAuctionManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenSlotAuctionManagerOwnershipTransferred)
				if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) ParseOwnershipTransferred(log types.Log) (*ERC20TokenSlotAuctionManagerOwnershipTransferred, error) {
	event := new(ERC20TokenSlotAuctionManagerOwnershipTransferred)
	if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator is returned from FilterSuccessfulBidPlaced and is used to iterate over the raw logs and unpacked data for SuccessfulBidPlaced events raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator struct {
	Event *ERC20TokenSlotAuctionManagerSuccessfulBidPlaced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20TokenSlotAuctionManagerSuccessfulBidPlaced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20TokenSlotAuctionManagerSuccessfulBidPlaced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20TokenSlotAuctionManagerSuccessfulBidPlaced represents a SuccessfulBidPlaced event raised by the ERC20TokenSlotAuctionManager contract.
type ERC20TokenSlotAuctionManagerSuccessfulBidPlaced struct {
	Bid    *big.Int
	NodeID common.Hash
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSuccessfulBidPlaced is a free log retrieval operation binding the contract event 0x864a2110bb41c315e04bd6122b668384bca4b0d8509e55850db8347e86a95029.
//
// Solidity: event SuccessfulBidPlaced(uint256 indexed bid, bytes indexed nodeID)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) FilterSuccessfulBidPlaced(opts *bind.FilterOpts, bid []*big.Int, nodeID [][]byte) (*ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator, error) {

	var bidRule []interface{}
	for _, bidItem := range bid {
		bidRule = append(bidRule, bidItem)
	}
	var nodeIDRule []interface{}
	for _, nodeIDItem := range nodeID {
		nodeIDRule = append(nodeIDRule, nodeIDItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.FilterLogs(opts, "SuccessfulBidPlaced", bidRule, nodeIDRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TokenSlotAuctionManagerSuccessfulBidPlacedIterator{contract: _ERC20TokenSlotAuctionManager.contract, event: "SuccessfulBidPlaced", logs: logs, sub: sub}, nil
}

// WatchSuccessfulBidPlaced is a free log subscription operation binding the contract event 0x864a2110bb41c315e04bd6122b668384bca4b0d8509e55850db8347e86a95029.
//
// Solidity: event SuccessfulBidPlaced(uint256 indexed bid, bytes indexed nodeID)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) WatchSuccessfulBidPlaced(opts *bind.WatchOpts, sink chan<- *ERC20TokenSlotAuctionManagerSuccessfulBidPlaced, bid []*big.Int, nodeID [][]byte) (event.Subscription, error) {

	var bidRule []interface{}
	for _, bidItem := range bid {
		bidRule = append(bidRule, bidItem)
	}
	var nodeIDRule []interface{}
	for _, nodeIDItem := range nodeID {
		nodeIDRule = append(nodeIDRule, nodeIDItem)
	}

	logs, sub, err := _ERC20TokenSlotAuctionManager.contract.WatchLogs(opts, "SuccessfulBidPlaced", bidRule, nodeIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20TokenSlotAuctionManagerSuccessfulBidPlaced)
				if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "SuccessfulBidPlaced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSuccessfulBidPlaced is a log parse operation binding the contract event 0x864a2110bb41c315e04bd6122b668384bca4b0d8509e55850db8347e86a95029.
//
// Solidity: event SuccessfulBidPlaced(uint256 indexed bid, bytes indexed nodeID)
func (_ERC20TokenSlotAuctionManager *ERC20TokenSlotAuctionManagerFilterer) ParseSuccessfulBidPlaced(log types.Log) (*ERC20TokenSlotAuctionManagerSuccessfulBidPlaced, error) {
	event := new(ERC20TokenSlotAuctionManagerSuccessfulBidPlaced)
	if err := _ERC20TokenSlotAuctionManager.contract.UnpackLog(event, "SuccessfulBidPlaced", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
